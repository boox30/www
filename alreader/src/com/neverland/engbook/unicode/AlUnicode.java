package com.neverland.engbook.unicode;

import java.util.HashMap;
import java.util.Map.Entry;

import com.neverland.engbook.forpublic.AlIntHolder;
import com.neverland.engbook.forpublic.TAL_CODE_PAGES;



public class AlUnicode {
	
	public final static boolean isLetter(char ch) {
		return ((((1 << Character.UPPERCASE_LETTER) |
				  (1 << Character.LOWERCASE_LETTER) |
				  (1 << Character.TITLECASE_LETTER) |
				  (1 << Character.MODIFIER_LETTER) |
				  (1 << Character.OTHER_LETTER)
				 ) >> Character.getType((int)ch)
				) & 1
			   ) != 0;
	}
	
	public final static boolean isLetterOrDigit(char ch) {
		return ((((1 << Character.UPPERCASE_LETTER) |
				  (1 << Character.LOWERCASE_LETTER) |
				  (1 << Character.TITLECASE_LETTER) |
				  (1 << Character.MODIFIER_LETTER) |
				  (1 << Character.OTHER_LETTER) |
				  (1 << Character.DECIMAL_DIGIT_NUMBER)
				 ) >> Character.getType((int)ch)
				) & 1
			   ) != 0;	
	}
	
	public final static boolean isChineze(char ch) {
		return ch >= 0x3000;
	}
		
	public final static boolean isDecDigit(char ch) {
		switch (ch) {
		case '0': case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			return true;
		}
		return false;		
	}
	
	public final static boolean isHEXDigit(char ch) {
		switch (ch) {
		case '0': case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
		case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':
		case 'A': case 'B': case 'C': case 'D': case 'E': case 'F':	
			return true;
		}
		return false;		
	}
	
	public final static boolean isRTFManage(char ch) {
		return ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z'));
	}
	
	public final static boolean isHyphWordChar(char ch) {
		switch (ch) {
		case 0x2b: // +
		case 0x2d: // - 
		case 0x2f: // /
		case 0x5c: // \
		case 0x2013: case 0x2014: case 0x2015: // -
			return true;
		}
		return false;		
	}
	
	public final static boolean isHyphChar(char ch) {
		switch (ch) {
		case 0x2d: case 0x2013: case 0x2014:
			return true;
		}
		return false;		
	}

	
	public final static boolean isDashPunctuation(char ch) {
		return Character.getType(ch) == Character.DASH_PUNCTUATION;
	}

	public final static boolean isDigit(char ch) {
		return Character.DECIMAL_DIGIT_NUMBER== Character.getType((int)ch);		
	}

	public final static boolean isCSSFirstLetter(char ch) {
		final int t = Character.getType(ch); 
		if (t == Character.INITIAL_QUOTE_PUNCTUATION ||
			t == Character.START_PUNCTUATION ||
			t == Character.FINAL_QUOTE_PUNCTUATION ||
			t == Character.END_PUNCTUATION ||
			t == Character.OTHER_PUNCTUATION) 
			return true;
		
		return false;
	}
	
	public final static boolean isPunctuation(char ch) {
		switch (Character.getType((int)ch)) {
		case Character.START_PUNCTUATION:
		case Character.OTHER_PUNCTUATION:
		case Character.INITIAL_QUOTE_PUNCTUATION:
		case Character.FINAL_QUOTE_PUNCTUATION:
		case Character.END_PUNCTUATION:
		case Character.DASH_PUNCTUATION:
		/////
		case Character.MATH_SYMBOL:
		case Character.CURRENCY_SYMBOL:
			return true;
		}		
		return false;		
	}
	
	public final static boolean isPunctuation2(char ch) {
		return ((((1 << Character.START_PUNCTUATION) |
				  (1 << Character.OTHER_PUNCTUATION) |
				  (1 << Character.INITIAL_QUOTE_PUNCTUATION) |
				  (1 << Character.FINAL_QUOTE_PUNCTUATION) |
				  (1 << Character.END_PUNCTUATION) |
				  (1 << Character.DASH_PUNCTUATION)
				  // 
				  | (1 << Character.MATH_SYMBOL)
				  | (1 << Character.CURRENCY_SYMBOL)
				  //
				 ) >> Character.getType((int)ch)
				) & 1
			   ) != 0;	
	}
	
	public final static boolean isLatinLetterOrDigit(char ch) {
		if (ch >= 0x20 && ch < 0x80)
			switch (Character.getType((int)ch)) {
			case Character.UPPERCASE_LETTER:
			case Character.LOWERCASE_LETTER:
			case Character.TITLECASE_LETTER:
			case Character.MODIFIER_LETTER:
			case Character.OTHER_LETTER:
			case Character.DECIMAL_DIGIT_NUMBER:
				return true;
			}
		return false;	
	}

	public final static boolean isLatinLetter(char ch) {
		if (ch >= 0x20 && ch < 0x80)
			switch (Character.getType((int)ch)) {
			case Character.UPPERCASE_LETTER:
			case Character.LOWERCASE_LETTER:
			case Character.TITLECASE_LETTER:
			case Character.MODIFIER_LETTER:
			case Character.OTHER_LETTER:	
				return true;
			}
		return false;	
	}
	
	public final static boolean isSpace(char ch) {
		return (ch <= 0x0020) &&
               (((((1L << 0x0009) |
                   (1L << 0x000A) |
                   (1L << 0x000C) |
                   (1L << 0x000D) |
                   (1L << 0x0020)
                  ) >> ch
                 ) & 1L
                ) != 0);		
	}
	
	
	public final static int readRealCodePage(String src) {
		String test = src.toLowerCase();
		
		for (Entry<String, Integer> entry: encodingXMLMap.entrySet()) {
		    if (test.indexOf(entry.getKey()) != -1) {
		    	Integer res = entry.getValue();
		    	if (res != null)
		    		return res;
		    }
		}
		
		return TAL_CODE_PAGES.AUTO;
	}

	public static char byte2Wide(final int cp, final byte[] src, AlIntHolder src_pos) {
		char ch = (char)src[src_pos.value++], ch1;
					
		ch &= 0xff;
		switch (cp) {
		case TAL_CODE_PAGES.CP65001:
			if ((ch & 0x80) == 0) { } else
			if ((ch & 0x20) == 0) {				
				ch = (char)((ch & 0x1f) << 6);				
				ch1 = (char)src[src_pos.value++];
				ch += (char)(ch1 & 0x3f);						
			} else {
				ch = (char)((ch & 0x1f) << 6);				
				ch1 = (char)src[src_pos.value++];							
				ch += (char)(ch1 & 0x3f);					
				ch <<= 6;				
				ch1 = (char)src[src_pos.value++];				
				ch += (char)(ch1 & 0x3f);
			}
			break;
		case TAL_CODE_PAGES.CP1201:
			ch <<= 8;
			ch1 = (char)src[src_pos.value++];
			ch |= ch1 & 0xff;
			break;
		case TAL_CODE_PAGES.CP1200:			
			ch1 = (char)src[src_pos.value++];					
			ch |= ch1 << 8;
			break;
			
		case TAL_CODE_PAGES.CP932:
			if (ch > 0x80) {
				switch (ch) {
				case 0x80 :
				case 0xfd :
				case 0xfe :
				case 0xff : ch = 0x0000; break;
				default :
					if (ch >= 0xa1 && ch <= 0xdf) {
						ch = (char) (ch + 0xfec0);
						break;
					}
					ch1 = (char) (src[src_pos.value++] & 0xff);
					ch = (ch1 >= 0x40 && ch1 <= 0xfc) ? CP932.getChar(ch, ch1) : 0x00;
					break;
				}						
			}				
			break;
		case TAL_CODE_PAGES.CP936:					
			if (ch >= 0x80) {
				switch (ch) {
				case 0x80 : ch = 0x20AC; break;
				case 0xff : ch = 0x0000; break;
				default :
					ch1 = (char) (src[src_pos.value++] & 0xff);
					ch = (ch1 >= 0x40 && ch1 <= 0xfe) ? CP936.getChar(ch, ch1) : 0x00;
					break;
				}
			}				
			break;	
		case TAL_CODE_PAGES.CP949:					
			if (ch >= 0x80) {
				switch (ch) {
				case 0x80 :
				case 0xff : ch = 0x0000; break;
				default :
					ch1 = (char) (src[src_pos.value++] & 0xff);
					ch = (ch1 >= 0x41 && ch1 <= 0xfe) ? CP949.getChar(ch, ch1) : 0x00;
					break;
				}
			}				
			break;
		case TAL_CODE_PAGES.CP950:					
			if (ch >= 0x80) {
				switch (ch) {
				case 0x80 :
				case 0xff : ch = 0x0000; break;
				default :
					ch1 = (char) (src[src_pos.value++] & 0xff);
					ch = (ch1 >= 0x40 && ch1 <= 0xfe) ? CP950.getChar(ch, ch1) : 0x00;
					break;
				}
			}				
			break;
			
		case TAL_CODE_PAGES.CP437:
			if (ch >= 0x80) 			
				ch = data_1250[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP850:
			if (ch >= 0x80) 			
				ch = data_1250[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP855:
			if (ch >= 0x80) 			
				ch = data_1250[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP860:
			if (ch >= 0x80) 			
				ch = data_1250[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP861:
			if (ch >= 0x80) 			
				ch = data_1250[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP863:
			if (ch >= 0x80) 			
				ch = data_1250[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP865:
			if (ch >= 0x80) 			
				ch = data_1250[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP866:
			if (ch >= 0x80) 			
				ch = data_1250[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP874:
			if (ch >= 0x80) 			
				ch = data_1250[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP1250:
			if (ch >= 0x80) 			
				ch = data_1250[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP1251:
			if (ch >= 0x80) 			
				ch = data_1251[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP1252:
			if (ch >= 0x80) 			
				ch = data_1252[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP1253:
			if (ch >= 0x80) 			
				ch = data_1253[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP1254:
			if (ch >= 0x80) 			
				ch = data_1254[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP1255:
			if (ch >= 0x80) 			
				ch = data_1255[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP1256:
			if (ch >= 0x80) 			
				ch = data_1256[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP1257:
			if (ch >= 0x80) 			
				ch = data_1257[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP1258:
			if (ch >= 0x80) 			
				ch = data_1258[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP10007:
			if (ch >= 0x80) 			
				ch = data_10007[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP10017:
			if (ch >= 0x80) 			
				ch = data_10017[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP10079:
			if (ch >= 0x80) 			
				ch = data_10079[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP20127:
			if (ch >= 0x80) 			
				ch = data_20127[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP20866:
			if (ch >= 0x80) 			
				ch = data_20866[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP21866:
			if (ch >= 0x80) 			
				ch = data_21866[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP28591:
			if (ch >= 0x80) 			
				ch = data_28591[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP28592:
			if (ch >= 0x80) 			
				ch = data_28592[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP28595:
			if (ch >= 0x80) 			
				ch = data_28595[ch - 0x80];
			break;
		case TAL_CODE_PAGES.CP28605:
			if (ch >= 0x80) 			
				ch = data_28605[ch - 0x80];
			break;
			
		default:
			if (ch >= 0x80) 			
				ch = data_1251[ch - 0x80];
			break;
		}
		return ch;
	}
	
	public static HashMap<String, Integer> encodingXMLMap = null;
	static {
/////////////// XML  ///////////////////////		
		encodingXMLMap = new HashMap<String, Integer>(); 
		/*encodingXMLMap.put("cp473", TAL_CODE_PAGES.CP437);
		encodingXMLMap.put("cp850",	TAL_CODE_PAGES.CP850);
		encodingXMLMap.put("cp855",	TAL_CODE_PAGES.CP855);
		encodingXMLMap.put("cp860",	TAL_CODE_PAGES.CP860);
		encodingXMLMap.put("cp861",	TAL_CODE_PAGES.CP861);
		encodingXMLMap.put("cp863",	TAL_CODE_PAGES.CP863);
		encodingXMLMap.put("cp865",	TAL_CODE_PAGES.CP865);		
		encodingXMLMap.put("cp866",	TAL_CODE_PAGES.CP866); //��������� (DOS));
		encodingXMLMap.put("iso-8859-11",	TAL_CODE_PAGES.CP866);		
		encodingXMLMap.put("cp874",	TAL_CODE_PAGES.CP874); //������� (Windows));
		encodingXMLMap.put("windows-874", TAL_CODE_PAGES.CP874);
		encodingXMLMap.put("iso-8859-11", TAL_CODE_PAGES.CP874);
		encodingXMLMap.put("windows-874-2000", TAL_CODE_PAGES.CP874);		*/
		
		/*encodingXMLMap.put("shift_jis",	TAL_CODE_PAGES.CP932); //�������� (Windows)
		encodingXMLMap.put("csshiftjis",	TAL_CODE_PAGES.CP932);
		encodingXMLMap.put("cswindows31j",	TAL_CODE_PAGES.CP932);
		encodingXMLMap.put("ms_kanji",	TAL_CODE_PAGES.CP932);
		encodingXMLMap.put("shift-jis",	TAL_CODE_PAGES.CP932);
		encodingXMLMap.put("x-ms-cp932",	TAL_CODE_PAGES.CP932);
		encodingXMLMap.put("x-sjis",	TAL_CODE_PAGES.CP932);
		encodingXMLMap.put("windows-31j",	TAL_CODE_PAGES.CP932);
		encodingXMLMap.put("windows-932-2000",	TAL_CODE_PAGES.CP932);*/
		
		/*encodingXMLMap.put("cp936",	TAL_CODE_PAGES.CP936); //��������� � ���������� ������ (GB2312)
		encodingXMLMap.put("gb2312",	TAL_CODE_PAGES.CP936);
		encodingXMLMap.put("csgb2312",	TAL_CODE_PAGES.CP936);
		encodingXMLMap.put("csiso58gb23128",	TAL_CODE_PAGES.CP936);
		encodingXMLMap.put("iso-ir-58",	TAL_CODE_PAGES.CP936);
		encodingXMLMap.put("gb2312",	TAL_CODE_PAGES.CP936);
		encodingXMLMap.put("gbk",	TAL_CODE_PAGES.CP936);
		encodingXMLMap.put("gb_2312-80",	TAL_CODE_PAGES.CP936);
		encodingXMLMap.put("gb-3212-2000",	TAL_CODE_PAGES.CP936);
		encodingXMLMap.put("chinese",	TAL_CODE_PAGES.CP936);
		encodingXMLMap.put("cn-gb",	TAL_CODE_PAGES.CP936);
		encodingXMLMap.put("cn-gB-isoir165",	TAL_CODE_PAGES.CP936);
		encodingXMLMap.put("gb18030",	TAL_CODE_PAGES.CP936);*/
		
		/*encodingXMLMap.put("cp949",	TAL_CODE_PAGES.CP949); //��������� (Windows)
		encodingXMLMap.put("ks_c_5601-1987",	TAL_CODE_PAGES.CP949);
		encodingXMLMap.put("csksc56011987",	TAL_CODE_PAGES.CP949);
		encodingXMLMap.put("korean",	TAL_CODE_PAGES.CP949);
		encodingXMLMap.put("windows-949",	TAL_CODE_PAGES.CP949);
		encodingXMLMap.put("windows-949-2000",	TAL_CODE_PAGES.CP949);	*/
		
		/*encodingXMLMap.put("cp950",	TAL_CODE_PAGES.CP950); //��������� � ������������ ������ (Windows)
		encodingXMLMap.put("big5",	TAL_CODE_PAGES.CP950);
		encodingXMLMap.put("csbig5",	TAL_CODE_PAGES.CP950);
		encodingXMLMap.put("cn-big5",	TAL_CODE_PAGES.CP950);
		encodingXMLMap.put("windows-950",	TAL_CODE_PAGES.CP950);
		encodingXMLMap.put("windows-950-2000",	TAL_CODE_PAGES.CP950);
		encodingXMLMap.put("x-x-big5",	TAL_CODE_PAGES.CP950);		*/
		
		encodingXMLMap.put("windows-1250",  TAL_CODE_PAGES.CP1250); //����������� ������ (Windows)
		encodingXMLMap.put("x-cp1250",  TAL_CODE_PAGES.CP1250);		
		encodingXMLMap.put("windows-1251",  TAL_CODE_PAGES.CP1251); //��������� (Windows)
		encodingXMLMap.put("cswindows31latin5",  TAL_CODE_PAGES.CP1251);		
		encodingXMLMap.put("windows-1251-2000",  TAL_CODE_PAGES.CP1251);
		encodingXMLMap.put("x-cp1251",  TAL_CODE_PAGES.CP1251);		
		encodingXMLMap.put("windows-1252",  TAL_CODE_PAGES.CP1252); //�������� ������ (Windows)
		encodingXMLMap.put("windows-1253",  TAL_CODE_PAGES.CP1253); //��������� (Windows)
		encodingXMLMap.put("windows-1253-2000",  TAL_CODE_PAGES.CP1253);
		encodingXMLMap.put("x-cp1253",  TAL_CODE_PAGES.CP1253);
		encodingXMLMap.put("windows-1254",  TAL_CODE_PAGES.CP1254); //�������� (Windows)
		encodingXMLMap.put("windows-1254-2000",  TAL_CODE_PAGES.CP1254);
		encodingXMLMap.put("x-cp1254",  TAL_CODE_PAGES.CP1254);
		encodingXMLMap.put("windows-1255",  TAL_CODE_PAGES.CP1255); //����� (Windows)
		encodingXMLMap.put("iso_8859-8:1988",  TAL_CODE_PAGES.CP1255);
		encodingXMLMap.put("iso-ir-138",  TAL_CODE_PAGES.CP1255);
		encodingXMLMap.put("logical",  TAL_CODE_PAGES.CP1255);
		encodingXMLMap.put("windows-1255-2000",  TAL_CODE_PAGES.CP1255);
		encodingXMLMap.put("windows-1256",  TAL_CODE_PAGES.CP1256); //�������� (Windows)
		encodingXMLMap.put("cp1256",  TAL_CODE_PAGES.CP1256);
		encodingXMLMap.put("windows-1256-2000",  TAL_CODE_PAGES.CP1256);
		encodingXMLMap.put("windows-1257",  TAL_CODE_PAGES.CP1257); //���������� ����� (Windows)
		encodingXMLMap.put("windows-1257-2000",  TAL_CODE_PAGES.CP1257);
		encodingXMLMap.put("windows-1258",  TAL_CODE_PAGES.CP1258); //����������� (Windows)
		encodingXMLMap.put("windows-1258-2000",  TAL_CODE_PAGES.CP1258);		
		/*encodingXMLMap.put("mac-roman-2000", TAL_CODE_PAGES.CP10000); //�������� ������ (Mac)
		encodingXMLMap.put("x-mac-roman", TAL_CODE_PAGES.CP10000);
		encodingXMLMap.put("mac-cyrillic-2000", TAL_CODE_PAGES.CP10007); //��������� (Mac)
		encodingXMLMap.put("x-mac-cyrillic", TAL_CODE_PAGES.CP10007);
		encodingXMLMap.put("us-ascii", TAL_CODE_PAGES.CP20127); //�������� ������ (ASCII)
		encodingXMLMap.put("ansi_x3.4-1968", TAL_CODE_PAGES.CP20127);
		encodingXMLMap.put("ansi_x3.4-1986", TAL_CODE_PAGES.CP20127);
		encodingXMLMap.put("cp367", TAL_CODE_PAGES.CP20127);
		encodingXMLMap.put("csascii", TAL_CODE_PAGES.CP20127);
		encodingXMLMap.put("ibm367", TAL_CODE_PAGES.CP20127);
		encodingXMLMap.put("iso-ir-6", TAL_CODE_PAGES.CP20127);
		encodingXMLMap.put("iso646-us", TAL_CODE_PAGES.CP20127);
		encodingXMLMap.put("iso_646.irv:1991", TAL_CODE_PAGES.CP20127);
		encodingXMLMap.put("iso_646.irv:1991", TAL_CODE_PAGES.CP20127);
		encodingXMLMap.put("ascii", TAL_CODE_PAGES.CP20127);
		encodingXMLMap.put("us", TAL_CODE_PAGES.CP20127);
		encodingXMLMap.put("us-ascii-1968", TAL_CODE_PAGES.CP20127);
		encodingXMLMap.put("x-ansi", TAL_CODE_PAGES.CP20127);
		encodingXMLMap.put("koi8-r", TAL_CODE_PAGES.CP20866); //��������� (���8-�)
		encodingXMLMap.put("cskoi8r", TAL_CODE_PAGES.CP20866);
		encodingXMLMap.put("koi", TAL_CODE_PAGES.CP20866);
		encodingXMLMap.put("ru-koi8_r-2000", TAL_CODE_PAGES.CP20866);
		encodingXMLMap.put("koi8-u", TAL_CODE_PAGES.CP21866); //���������� (���8-�)
		encodingXMLMap.put("iso-8859-1", TAL_CODE_PAGES.CP28591); //�������� ������ (Latin-1)
		encodingXMLMap.put("cp819", TAL_CODE_PAGES.CP28591);
		encodingXMLMap.put("ibm819", TAL_CODE_PAGES.CP28591);
		encodingXMLMap.put("iso-ir-100", TAL_CODE_PAGES.CP28591);
		encodingXMLMap.put("iso8859-1", TAL_CODE_PAGES.CP28591);
		encodingXMLMap.put("iso_8859-1", TAL_CODE_PAGES.CP28591);
		encodingXMLMap.put("iso_8859-1:1987", TAL_CODE_PAGES.CP28591);
		encodingXMLMap.put("iso-8859_1-1998", TAL_CODE_PAGES.CP28591);
		encodingXMLMap.put("iso-8859-1-windows-3.0-latin-1", TAL_CODE_PAGES.CP28591);
		encodingXMLMap.put("iso-8859-1-windows-3.1-latin-1", TAL_CODE_PAGES.CP28591);
		encodingXMLMap.put("latin1", TAL_CODE_PAGES.CP28591);
		encodingXMLMap.put("l1", TAL_CODE_PAGES.CP28591);
		encodingXMLMap.put("iso-8859-2", TAL_CODE_PAGES.CP28592); //����������� ������ (Latin-2)
		encodingXMLMap.put("csisolatin2", TAL_CODE_PAGES.CP28592);
		encodingXMLMap.put("iso-ir-101", TAL_CODE_PAGES.CP28592);
		encodingXMLMap.put("iso8859-2", TAL_CODE_PAGES.CP28592);
		encodingXMLMap.put("iso_8859-2", TAL_CODE_PAGES.CP28592);
		encodingXMLMap.put("iso_8859-2:1987", TAL_CODE_PAGES.CP28592);
		encodingXMLMap.put("iso_8859_2-1999", TAL_CODE_PAGES.CP28592);
		encodingXMLMap.put("iso-8859-2-windows-latin-2", TAL_CODE_PAGES.CP28592);
		encodingXMLMap.put("l2", TAL_CODE_PAGES.CP28592);
		encodingXMLMap.put("latin2", TAL_CODE_PAGES.CP28592);
		encodingXMLMap.put("iso-8859-5", TAL_CODE_PAGES.CP28595); //��������� (ISO)
		encodingXMLMap.put("iso-8859-5-windows-latin-5",  TAL_CODE_PAGES.CP28595);
		encodingXMLMap.put("csisolatincyrillic", TAL_CODE_PAGES.CP28595);
		encodingXMLMap.put("iso-ir-144", TAL_CODE_PAGES.CP28595);
		encodingXMLMap.put("iso_8859-5", TAL_CODE_PAGES.CP28595);
		encodingXMLMap.put("iso_8859-5:1988", TAL_CODE_PAGES.CP28595);
		encodingXMLMap.put("iso-8859_5-1999", TAL_CODE_PAGES.CP28595);
		encodingXMLMap.put("cyrillic", TAL_CODE_PAGES.CP28595);
		encodingXMLMap.put("iso-8859-15", TAL_CODE_PAGES.CP28605); //������ (Latin-9)
		encodingXMLMap.put("iso-8859_15-1999", TAL_CODE_PAGES.CP28605);
		encodingXMLMap.put("utf-7",  TAL_CODE_PAGES.CP65000);
		encodingXMLMap.put("csunicode11utf7",  TAL_CODE_PAGES.CP65000);
		encodingXMLMap.put("unicode-utf_7",  TAL_CODE_PAGES.CP65000);
		encodingXMLMap.put("unicode-1-1-utf-7",  TAL_CODE_PAGES.CP65000);
		encodingXMLMap.put("unicode-2-0-utf-7",  TAL_CODE_PAGES.CP65000);
		encodingXMLMap.put("x-unicode-2-0-utf-7",  TAL_CODE_PAGES.CP65000);*/
		encodingXMLMap.put("utf-8",  TAL_CODE_PAGES.CP65001);
		encodingXMLMap.put("unicode-utf_8",  TAL_CODE_PAGES.CP65001);
		encodingXMLMap.put("unicode-utf_8-1_1",  TAL_CODE_PAGES.CP65001);
		encodingXMLMap.put("unicode-1-1-utf-8",  TAL_CODE_PAGES.CP65001);
		encodingXMLMap.put("unicode-2-0-utf-8",  TAL_CODE_PAGES.CP65001);
		encodingXMLMap.put("x-unicode-2-0-utf-8",  TAL_CODE_PAGES.CP65001);		
		
		/*
		{0x00ffffff,  "unicode-utf_16"},
		{0x00ffffff,  "csUnicode11"},
		{0x00ffffff,  "csUnicodeASCII"},
		{0x00ffffff,  "csUnicodeLatin1"},
		{0x00ffffff,  "ISO-10646-UCS-2"},
		{0x00ffffff,  "ISO-10646-UCS-BASIC"},
		{0x00ffffff,  "ISO-10646-Unicode-Latin1"},
		{0x00ffffff,  "ISO-10646"},
		{0x00ffffff,  "ISO-10646-J-1"},
		{0x00ffffff,  "unicode-utf_16-1.1"},
		{0x00ffffff,  "unicode"},
		*/

	}

	
	private static final char data_437[] = {
		  0x00C7,  0x00FC,  0x00E9,  0x00E2,  0x00E4,  0x00E0,  0x00E5,  0x00E7,
		  0x00EA,  0x00EB,  0x00E8,  0x00EF,  0x00EE,  0x00EC,  0x00C4,  0x00C5,
		  0x00C9,  0x00E6,  0x00C6,  0x00F4,  0x00F6,  0x00F2,  0x00FB,  0x00F9,
		  0x00FF,  0x00D6,  0x00DC,  0x00A2,  0x00A3,  0x00A5,  0x20A7,  0x0192,
		  0x00E1,  0x00ED,  0x00F3,  0x00FA,  0x00F1,  0x00D1,  0x00AA,  0x00BA,
		  0x00BF,  0x2310,  0x00AC,  0x00BD,  0x00BC,  0x00A1,  0x00AB,  0x00BB,
		  0x2591,  0x2592,  0x2593,  0x2502,  0x2524,  0x2561,  0x2562,  0x2556,
		  0x2555,  0x2563,  0x2551,  0x2557,  0x255D,  0x255C,  0x255B,  0x2510,
		  0x2514,  0x2534,  0x252C,  0x251C,  0x2500,  0x253C,  0x255E,  0x255F,
		  0x255A,  0x2554,  0x2569,  0x2566,  0x2560,  0x2550,  0x256C,  0x2567,
		  0x2568,  0x2564,  0x2565,  0x2559,  0x2558,  0x2552,  0x2553,  0x256B,
		  0x256A,  0x2518,  0x250C,  0x2588,  0x2584,  0x258C,  0x2590,  0x2580,
		  0x03B1,  0x00DF,  0x0393,  0x03C0,  0x03A3,  0x03C3,  0x00B5,  0x03C4,
		  0x03A6,  0x0398,  0x03A9,  0x03B4,  0x221E,  0x03C6,  0x03B5,  0x2229,
		  0x2261,  0x00B1,  0x2265,  0x2264,  0x2320,  0x2321,  0x00F7,  0x2248,
		  0x00B0,  0x2219,  0x00B7,  0x221A,  0x207F,  0x00B2,  0x25A0,  0x00A0
	};
	private static final char data_850[] = {
		  0x00C7,  0x00FC,  0x00E9,  0x00E2,  0x00E4,  0x00E0,  0x00E5,  0x00E7,
		  0x00EA,  0x00EB,  0x00E8,  0x00EF,  0x00EE,  0x00EC,  0x00C4,  0x00C5,
		  0x00C9,  0x00E6,  0x00C6,  0x00F4,  0x00F6,  0x00F2,  0x00FB,  0x00F9,
		  0x00FF,  0x00D6,  0x00DC,  0x00F8,  0x00A3,  0x00D8,  0x00D7,  0x0192,
		  0x00E1,  0x00ED,  0x00F3,  0x00FA,  0x00F1,  0x00D1,  0x00AA,  0x00BA,
		  0x00BF,  0x00AE,  0x00AC,  0x00BD,  0x00BC,  0x00A1,  0x00AB,  0x00BB,
		  0x2591,  0x2592,  0x2593,  0x2502,  0x2524,  0x00C1,  0x00C2,  0x00C0,
		  0x00A9,  0x2563,  0x2551,  0x2557,  0x255D,  0x00A2,  0x00A5,  0x2510,
		  0x2514,  0x2534,  0x252C,  0x251C,  0x2500,  0x253C,  0x00E3,  0x00C3,
		  0x255A,  0x2554,  0x2569,  0x2566,  0x2560,  0x2550,  0x256C,  0x00A4,
		  0x00F0,  0x00D0,  0x00CA,  0x00CB,  0x00C8,  0x0131,  0x00CD,  0x00CE,
		  0x00CF,  0x2518,  0x250C,  0x2588,  0x2584,  0x00A6,  0x00CC,  0x2580,
		  0x00D3,  0x00DF,  0x00D4,  0x00D2,  0x00F5,  0x00D5,  0x00B5,  0x00FE,
		  0x00DE,  0x00DA,  0x00DB,  0x00D9,  0x00FD,  0x00DD,  0x00AF,  0x00B4,
		  0x00AD,  0x00B1,  0x2017,  0x00BE,  0x00B6,  0x00A7,  0x00F7,  0x00B8,
		  0x00B0,  0x00A8,  0x00B7,  0x00B9,  0x00B3,  0x00B2,  0x25A0,  0x00A0
	};
	private static final char data_855[] = {
		  0x0452,  0x0402,  0x0453,  0x0403,  0x0451,  0x0401,  0x0454,  0x0404,
		  0x0455,  0x0405,  0x0456,  0x0406,  0x0457,  0x0407,  0x0458,  0x0408,
		  0x0459,  0x0409,  0x045A,  0x040A,  0x045B,  0x040B,  0x045C,  0x040C,
		  0x045E,  0x040E,  0x045F,  0x040F,  0x044E,  0x042E,  0x044A,  0x042A,
		  0x0430,  0x0410,  0x0431,  0x0411,  0x0446,  0x0426,  0x0434,  0x0414,
		  0x0435,  0x0415,  0x0444,  0x0424,  0x0433,  0x0413,  0x00AB,  0x00BB,
		  0x2591,  0x2592,  0x2593,  0x2502,  0x2524,  0x0445,  0x0425,  0x0438,
		  0x0418,  0x2563,  0x2551,  0x2557,  0x255D,  0x0439,  0x0419,  0x2510,
		  0x2514,  0x2534,  0x252C,  0x251C,  0x2500,  0x253C,  0x043A,  0x041A,
		  0x255A,  0x2554,  0x2569,  0x2566,  0x2560,  0x2550,  0x256C,  0x00A4,
		  0x043B,  0x041B,  0x043C,  0x041C,  0x043D,  0x041D,  0x043E,  0x041E,
		  0x043F,  0x2518,  0x250C,  0x2588,  0x2584,  0x041F,  0x044F,  0x2580,
		  0x042F,  0x0440,  0x0420,  0x0441,  0x0421,  0x0442,  0x0422,  0x0443,
		  0x0423,  0x0436,  0x0416,  0x0432,  0x0412,  0x044C,  0x042C,  0x2116,
		  0x00AD,  0x044B,  0x042B,  0x0437,  0x0417,  0x0448,  0x0428,  0x044D,
		  0x042D,  0x0449,  0x0429,  0x0447,  0x0427,  0x00A7,  0x25A0,  0x00A0
	};
	private static final char data_860[] = {
		  0x00C7,  0x00FC,  0x00E9,  0x00E2,  0x00E3,  0x00E0,  0x00C1,  0x00E7,
		  0x00EA,  0x00CA,  0x00E8,  0x00CD,  0x00D4,  0x00EC,  0x00C3,  0x00C2,
		  0x00C9,  0x00C0,  0x00C8,  0x00F4,  0x00F5,  0x00F2,  0x00DA,  0x00F9,
		  0x00CC,  0x00D5,  0x00DC,  0x00A2,  0x00A3,  0x00D9,  0x20A7,  0x00D3,
		  0x00E1,  0x00ED,  0x00F3,  0x00FA,  0x00F1,  0x00D1,  0x00AA,  0x00BA,
		  0x00BF,  0x00D2,  0x00AC,  0x00BD,  0x00BC,  0x00A1,  0x00AB,  0x00BB,
		  0x2591,  0x2592,  0x2593,  0x2502,  0x2524,  0x2561,  0x2562,  0x2556,
		  0x2555,  0x2563,  0x2551,  0x2557,  0x255D,  0x255C,  0x255B,  0x2510,
		  0x2514,  0x2534,  0x252C,  0x251C,  0x2500,  0x253C,  0x255E,  0x255F,
		  0x255A,  0x2554,  0x2569,  0x2566,  0x2560,  0x2550,  0x256C,  0x2567,
		  0x2568,  0x2564,  0x2565,  0x2559,  0x2558,  0x2552,  0x2553,  0x256B,
		  0x256A,  0x2518,  0x250C,  0x2588,  0x2584,  0x258C,  0x2590,  0x2580,
		  0x03B1,  0x00DF,  0x0393,  0x03C0,  0x03A3,  0x03C3,  0x00B5,  0x03C4,
		  0x03A6,  0x0398,  0x03A9,  0x03B4,  0x221E,  0x03C6,  0x03B5,  0x2229,
		  0x2261,  0x00B1,  0x2265,  0x2264,  0x2320,  0x2321,  0x00F7,  0x2248,
		  0x00B0,  0x2219,  0x00B7,  0x221A,  0x207F,  0x00B2,  0x25A0,  0x00A0
	};
	private static final char data_861[] = {
		  0x00C7,  0x00FC,  0x00E9,  0x00E2,  0x00E4,  0x00E0,  0x00E5,  0x00E7,
		  0x00EA,  0x00EB,  0x00E8,  0x00D0,  0x00F0,  0x00DE,  0x00C4,  0x00C5,
		  0x00C9,  0x00E6,  0x00C6,  0x00F4,  0x00F6,  0x00FE,  0x00FB,  0x00DD,
		  0x00FD,  0x00D6,  0x00DC,  0x00F8,  0x00A3,  0x00D8,  0x20A7,  0x0192,
		  0x00E1,  0x00ED,  0x00F3,  0x00FA,  0x00C1,  0x00CD,  0x00D3,  0x00DA,
		  0x00BF,  0x2310,  0x00AC,  0x00BD,  0x00BC,  0x00A1,  0x00AB,  0x00BB,
		  0x2591,  0x2592,  0x2593,  0x2502,  0x2524,  0x2561,  0x2562,  0x2556,
		  0x2555,  0x2563,  0x2551,  0x2557,  0x255D,  0x255C,  0x255B,  0x2510,
		  0x2514,  0x2534,  0x252C,  0x251C,  0x2500,  0x253C,  0x255E,  0x255F,
		  0x255A,  0x2554,  0x2569,  0x2566,  0x2560,  0x2550,  0x256C,  0x2567,
		  0x2568,  0x2564,  0x2565,  0x2559,  0x2558,  0x2552,  0x2553,  0x256B,
		  0x256A,  0x2518,  0x250C,  0x2588,  0x2584,  0x258C,  0x2590,  0x2580,
		  0x03B1,  0x00DF,  0x0393,  0x03C0,  0x03A3,  0x03C3,  0x00B5,  0x03C4,
		  0x03A6,  0x0398,  0x03A9,  0x03B4,  0x221E,  0x03C6,  0x03B5,  0x2229,
		  0x2261,  0x00B1,  0x2265,  0x2264,  0x2320,  0x2321,  0x00F7,  0x2248,
		  0x00B0,  0x2219,  0x00B7,  0x221A,  0x207F,  0x00B2,  0x25A0,  0x00A0
	};
	private static final char data_863[] = {	
		  0x00C7,  0x00FC,  0x00E9,  0x00E2,  0x00C2,  0x00E0,  0x00B6,  0x00E7,
		  0x00EA,  0x00EB,  0x00E8,  0x00EF,  0x00EE,  0x2017,  0x00C0,  0x00A7,
		  0x00C9,  0x00C8,  0x00CA,  0x00F4,  0x00CB,  0x00CF,  0x00FB,  0x00F9,
		  0x00A4,  0x00D4,  0x00DC,  0x00A2,  0x00A3,  0x00D9,  0x00DB,  0x0192,
		  0x00A6,  0x00B4,  0x00F3,  0x00FA,  0x00A8,  0x00B8,  0x00B3,  0x00AF,
		  0x00CE,  0x2310,  0x00AC,  0x00BD,  0x00BC,  0x00BE,  0x00AB,  0x00BB,
		  0x2591,  0x2592,  0x2593,  0x2502,  0x2524,  0x2561,  0x2562,  0x2556,
		  0x2555,  0x2563,  0x2551,  0x2557,  0x255D,  0x255C,  0x255B,  0x2510,
		  0x2514,  0x2534,  0x252C,  0x251C,  0x2500,  0x253C,  0x255E,  0x255F,
		  0x255A,  0x2554,  0x2569,  0x2566,  0x2560,  0x2550,  0x256C,  0x2567,
		  0x2568,  0x2564,  0x2565,  0x2559,  0x2558,  0x2552,  0x2553,  0x256B,
		  0x256A,  0x2518,  0x250C,  0x2588,  0x2584,  0x258C,  0x2590,  0x2580,
		  0x03B1,  0x00DF,  0x0393,  0x03C0,  0x03A3,  0x03C3,  0x00B5,  0x03C4,
		  0x03A6,  0x0398,  0x03A9,  0x03B4,  0x221E,  0x03C6,  0x03B5,  0x2229,
		  0x2261,  0x00B1,  0x2265,  0x2264,  0x2320,  0x2321,  0x00F7,  0x2248,
		  0x00B0,  0x2219,  0x00B7,  0x221A,  0x207F,  0x00B2,  0x25A0,  0x00A0
	};
	private static final char data_865[] = {
		  0x00C7,  0x00FC,  0x00E9,  0x00E2,  0x00E4,  0x00E0,  0x00E5,  0x00E7,
		  0x00EA,  0x00EB,  0x00E8,  0x00EF,  0x00EE,  0x00EC,  0x00C4,  0x00C5,
		  0x00C9,  0x00E6,  0x00C6,  0x00F4,  0x00F6,  0x00F2,  0x00FB,  0x00F9,
		  0x00FF,  0x00D6,  0x00DC,  0x00F8,  0x00A3,  0x00D8,  0x20A7,  0x0192,
		  0x00E1,  0x00ED,  0x00F3,  0x00FA,  0x00F1,  0x00D1,  0x00AA,  0x00BA,
		  0x00BF,  0x2310,  0x00AC,  0x00BD,  0x00BC,  0x00A1,  0x00AB,  0x00A4,
		  0x2591,  0x2592,  0x2593,  0x2502,  0x2524,  0x2561,  0x2562,  0x2556,
		  0x2555,  0x2563,  0x2551,  0x2557,  0x255D,  0x255C,  0x255B,  0x2510,
		  0x2514,  0x2534,  0x252C,  0x251C,  0x2500,  0x253C,  0x255E,  0x255F,
		  0x255A,  0x2554,  0x2569,  0x2566,  0x2560,  0x2550,  0x256C,  0x2567,
		  0x2568,  0x2564,  0x2565,  0x2559,  0x2558,  0x2552,  0x2553,  0x256B,
		  0x256A,  0x2518,  0x250C,  0x2588,  0x2584,  0x258C,  0x2590,  0x2580,
		  0x03B1,  0x00DF,  0x0393,  0x03C0,  0x03A3,  0x03C3,  0x00B5,  0x03C4,
		  0x03A6,  0x0398,  0x03A9,  0x03B4,  0x221E,  0x03C6,  0x03B5,  0x2229,
		  0x2261,  0x00B1,  0x2265,  0x2264,  0x2320,  0x2321,  0x00F7,  0x2248,
		  0x00B0,  0x2219,  0x00B7,  0x221A,  0x207F,  0x00B2,  0x25A0,  0x00A0
	};
	private static final char data_866[] = {
		  0x0410,  0x0411,  0x0412,  0x0413,  0x0414,  0x0415,  0x0416,  0x0417,
		  0x0418,  0x0419,  0x041A,  0x041B,  0x041C,  0x041D,  0x041E,  0x041F,
		  0x0420,  0x0421,  0x0422,  0x0423,  0x0424,  0x0425,  0x0426,  0x0427,
		  0x0428,  0x0429,  0x042A,  0x042B,  0x042C,  0x042D,  0x042E,  0x042F,
		  0x0430,  0x0431,  0x0432,  0x0433,  0x0434,  0x0435,  0x0436,  0x0437,
		  0x0438,  0x0439,  0x043A,  0x043B,  0x043C,  0x043D,  0x043E,  0x043F,
		  0x2591,  0x2592,  0x2593,  0x2502,  0x2524,  0x2561,  0x2562,  0x2556,
		  0x2555,  0x2563,  0x2551,  0x2557,  0x255D,  0x255C,  0x255B,  0x2510,
		  0x2514,  0x2534,  0x252C,  0x251C,  0x2500,  0x253C,  0x255E,  0x255F,
		  0x255A,  0x2554,  0x2569,  0x2566,  0x2560,  0x2550,  0x256C,  0x2567,
		  0x2568,  0x2564,  0x2565,  0x2559,  0x2558,  0x2552,  0x2553,  0x256B,
		  0x256A,  0x2518,  0x250C,  0x2588,  0x2584,  0x258C,  0x2590,  0x2580,
		  0x0440,  0x0441,  0x0442,  0x0443,  0x0444,  0x0445,  0x0446,  0x0447,
		  0x0448,  0x0449,  0x044A,  0x044B,  0x044C,  0x044D,  0x044E,  0x044F,
		  0x0401,  0x0451,  0x0404,  0x0454,  0x0407,  0x0457,  0x040E,  0x045E,
		  0x00B0,  0x2219,  0x00B7,  0x221A,  0x2116,  0x00A4,  0x25A0,  0x00A0
	};
	private static final char data_874[] = {	
		  0x20AC,  0x0081,  0x0082,  0x0083,  0x0084,  0x2026,  0x0086,  0x0087,
		  0x0088,  0x0089,  0x008A,  0x008B,  0x008C,  0x008D,  0x008E,  0x008F,
		  0x0090,  0x2018,  0x2019,  0x201C,  0x201D,  0x2022,  0x2013,  0x2014,
		  0x0098,  0x0099,  0x009A,  0x009B,  0x009C,  0x009D,  0x009E,  0x009F,
		  0x00A0,  0x0E01,  0x0E02,  0x0E03,  0x0E04,  0x0E05,  0x0E06,  0x0E07,
		  0x0E08,  0x0E09,  0x0E0A,  0x0E0B,  0x0E0C,  0x0E0D,  0x0E0E,  0x0E0F,
		  0x0E10,  0x0E11,  0x0E12,  0x0E13,  0x0E14,  0x0E15,  0x0E16,  0x0E17,
		  0x0E18,  0x0E19,  0x0E1A,  0x0E1B,  0x0E1C,  0x0E1D,  0x0E1E,  0x0E1F,
		  0x0E20,  0x0E21,  0x0E22,  0x0E23,  0x0E24,  0x0E25,  0x0E26,  0x0E27,
		  0x0E28,  0x0E29,  0x0E2A,  0x0E2B,  0x0E2C,  0x0E2D,  0x0E2E,  0x0E2F,
		  0x0E30,  0x0E31,  0x0E32,  0x0E33,  0x0E34,  0x0E35,  0x0E36,  0x0E37,
		  0x0E38,  0x0E39,  0x0E3A,  0xF8C1,  0xF8C2,  0xF8C3,  0xF8C4,  0x0E3F,
		  0x0E40,  0x0E41,  0x0E42,  0x0E43,  0x0E44,  0x0E45,  0x0E46,  0x0E47,
		  0x0E48,  0x0E49,  0x0E4A,  0x0E4B,  0x0E4C,  0x0E4D,  0x0E4E,  0x0E4F,
		  0x0E50,  0x0E51,  0x0E52,  0x0E53,  0x0E54,  0x0E55,  0x0E56,  0x0E57,
		  0x0E58,  0x0E59,  0x0E5A,  0x0E5B,  0xF8C5,  0xF8C6,  0xF8C7,  0xF8C8
	};
	private static final char data_1250[] = {	
		  0x20AC,  0x0081,  0x201A,  0x0083,  0x201E,  0x2026,  0x2020,  0x2021,
		  0x0088,  0x2030,  0x0160,  0x2039,  0x015A,  0x0164,  0x017D,  0x0179,
		  0x0090,  0x2018,  0x2019,  0x201C,  0x201D,  0x2022,  0x2013,  0x2014,
		  0x0098,  0x2122,  0x0161,  0x203A,  0x015B,  0x0165,  0x017E,  0x017A,
		  0x00A0,  0x02C7,  0x02D8,  0x0141,  0x00A4,  0x0104,  0x00A6,  0x00A7,
		  0x00A8,  0x00A9,  0x015E,  0x00AB,  0x00AC,  0x00AD,  0x00AE,  0x017B,
		  0x00B0,  0x00B1,  0x02DB,  0x0142,  0x00B4,  0x00B5,  0x00B6,  0x00B7,
		  0x00B8,  0x0105,  0x015F,  0x00BB,  0x013D,  0x02DD,  0x013E,  0x017C,
		  0x0154,  0x00C1,  0x00C2,  0x0102,  0x00C4,  0x0139,  0x0106,  0x00C7,
		  0x010C,  0x00C9,  0x0118,  0x00CB,  0x011A,  0x00CD,  0x00CE,  0x010E,
		  0x0110,  0x0143,  0x0147,  0x00D3,  0x00D4,  0x0150,  0x00D6,  0x00D7,
		  0x0158,  0x016E,  0x00DA,  0x0170,  0x00DC,  0x00DD,  0x0162,  0x00DF,
		  0x0155,  0x00E1,  0x00E2,  0x0103,  0x00E4,  0x013A,  0x0107,  0x00E7,
		  0x010D,  0x00E9,  0x0119,  0x00EB,  0x011B,  0x00ED,  0x00EE,  0x010F,
		  0x0111,  0x0144,  0x0148,  0x00F3,  0x00F4,  0x0151,  0x00F6,  0x00F7,
		  0x0159,  0x016F,  0x00FA,  0x0171,  0x00FC,  0x00FD,  0x0163,  0x02D9
	};
	private static final char data_1251[] = {
		  0x0402,  0x0403,  0x201A,  0x0453,  0x201E,  0x2026,  0x2020,  0x2021,
		  0x20AC,  0x2030,  0x0409,  0x2039,  0x040A,  0x040C,  0x040B,  0x040F,
		  0x0452,  0x2018,  0x2019,  0x201C,  0x201D,  0x2022,  0x2013,  0x2014,
		  0x0098,  0x2122,  0x0459,  0x203A,  0x045A,  0x045C,  0x045B,  0x045F,
		  0x00A0,  0x040E,  0x045E,  0x0408,  0x00A4,  0x0490,  0x00A6,  0x00A7,
		  0x0401,  0x00A9,  0x0404,  0x00AB,  0x00AC,  0x00AD,  0x00AE,  0x0407,
		  0x00B0,  0x00B1,  0x0406,  0x0456,  0x0491,  0x00B5,  0x00B6,  0x00B7,
		  0x0451,  0x2116,  0x0454,  0x00BB,  0x0458,  0x0405,  0x0455,  0x0457,
		  0x0410,  0x0411,  0x0412,  0x0413,  0x0414,  0x0415,  0x0416,  0x0417,
		  0x0418,  0x0419,  0x041A,  0x041B,  0x041C,  0x041D,  0x041E,  0x041F,
		  0x0420,  0x0421,  0x0422,  0x0423,  0x0424,  0x0425,  0x0426,  0x0427,
		  0x0428,  0x0429,  0x042A,  0x042B,  0x042C,  0x042D,  0x042E,  0x042F,
		  0x0430,  0x0431,  0x0432,  0x0433,  0x0434,  0x0435,  0x0436,  0x0437,
		  0x0438,  0x0439,  0x043A,  0x043B,  0x043C,  0x043D,  0x043E,  0x043F,
		  0x0440,  0x0441,  0x0442,  0x0443,  0x0444,  0x0445,  0x0446,  0x0447,
		  0x0448,  0x0449,  0x044A,  0x044B,  0x044C,  0x044D,  0x044E,  0x044F		
	};
	private static final char data_1252[] = {  
			  0x20AC,  0x0081,  0x201A,  0x0192,  0x201E,  0x2026,  0x2020,  0x2021,
			  0x02C6,  0x2030,  0x0160,  0x2039,  0x0152,  0x008D,  0x017D,  0x008F,
			  0x0090,  0x2018,  0x2019,  0x201C,  0x201D,  0x2022,  0x2013,  0x2014,
			  0x02DC,  0x2122,  0x0161,  0x203A,  0x0153,  0x009D,  0x017E,  0x0178,
			  0x00A0,  0x00A1,  0x00A2,  0x00A3,  0x00A4,  0x00A5,  0x00A6,  0x00A7,
			  0x00A8,  0x00A9,  0x00AA,  0x00AB,  0x00AC,  0x00AD,  0x00AE,  0x00AF,
			  0x00B0,  0x00B1,  0x00B2,  0x00B3,  0x00B4,  0x00B5,  0x00B6,  0x00B7,
			  0x00B8,  0x00B9,  0x00BA,  0x00BB,  0x00BC,  0x00BD,  0x00BE,  0x00BF,
			  0x00C0,  0x00C1,  0x00C2,  0x00C3,  0x00C4,  0x00C5,  0x00C6,  0x00C7,
			  0x00C8,  0x00C9,  0x00CA,  0x00CB,  0x00CC,  0x00CD,  0x00CE,  0x00CF,
			  0x00D0,  0x00D1,  0x00D2,  0x00D3,  0x00D4,  0x00D5,  0x00D6,  0x00D7,
			  0x00D8,  0x00D9,  0x00DA,  0x00DB,  0x00DC,  0x00DD,  0x00DE,  0x00DF,
			  0x00E0,  0x00E1,  0x00E2,  0x00E3,  0x00E4,  0x00E5,  0x00E6,  0x00E7,
			  0x00E8,  0x00E9,  0x00EA,  0x00EB,  0x00EC,  0x00ED,  0x00EE,  0x00EF,
			  0x00F0,  0x00F1,  0x00F2,  0x00F3,  0x00F4,  0x00F5,  0x00F6,  0x00F7,
			  0x00F8,  0x00F9,  0x00FA,  0x00FB,  0x00FC,  0x00FD,  0x00FE,  0x00FF
			};
	private static final char data_1253[] = {  
			  0x20AC,  0x0081,  0x201A,  0x0192,  0x201E,  0x2026,  0x2020,  0x2021,
			  0x0088,  0x2030,  0x008A,  0x2039,  0x008C,  0x008D,  0x008E,  0x008F,
			  0x0090,  0x2018,  0x2019,  0x201C,  0x201D,  0x2022,  0x2013,  0x2014,
			  0x0098,  0x2122,  0x009A,  0x203A,  0x009C,  0x009D,  0x009E,  0x009F,
			  0x00A0,  0x0385,  0x0386,  0x00A3,  0x00A4,  0x00A5,  0x00A6,  0x00A7,
			  0x00A8,  0x00A9,  0xF8F9,  0x00AB,  0x00AC,  0x00AD,  0x00AE,  0x2015,
			  0x00B0,  0x00B1,  0x00B2,  0x00B3,  0x0384,  0x00B5,  0x00B6,  0x00B7,
			  0x0388,  0x0389,  0x038A,  0x00BB,  0x038C,  0x00BD,  0x038E,  0x038F,
			  0x0390,  0x0391,  0x0392,  0x0393,  0x0394,  0x0395,  0x0396,  0x0397,
			  0x0398,  0x0399,  0x039A,  0x039B,  0x039C,  0x039D,  0x039E,  0x039F,
			  0x03A0,  0x03A1,  0xF8FA,  0x03A3,  0x03A4,  0x03A5,  0x03A6,  0x03A7,
			  0x03A8,  0x03A9,  0x03AA,  0x03AB,  0x03AC,  0x03AD,  0x03AE,  0x03AF,
			  0x03B0,  0x03B1,  0x03B2,  0x03B3,  0x03B4,  0x03B5,  0x03B6,  0x03B7,
			  0x03B8,  0x03B9,  0x03BA,  0x03BB,  0x03BC,  0x03BD,  0x03BE,  0x03BF,
			  0x03C0,  0x03C1,  0x03C2,  0x03C3,  0x03C4,  0x03C5,  0x03C6,  0x03C7,
			  0x03C8,  0x03C9,  0x03CA,  0x03CB,  0x03CC,  0x03CD,  0x03CE,  0xF8FB
			};
	private static final char data_1254[] = {  
			  0x20AC,  0x0081,  0x201A,  0x0192,  0x201E,  0x2026,  0x2020,  0x2021,
			  0x02C6,  0x2030,  0x0160,  0x2039,  0x0152,  0x008D,  0x008E,  0x008F,
			  0x0090,  0x2018,  0x2019,  0x201C,  0x201D,  0x2022,  0x2013,  0x2014,
			  0x02DC,  0x2122,  0x0161,  0x203A,  0x0153,  0x009D,  0x009E,  0x0178,
			  0x00A0,  0x00A1,  0x00A2,  0x00A3,  0x00A4,  0x00A5,  0x00A6,  0x00A7,
			  0x00A8,  0x00A9,  0x00AA,  0x00AB,  0x00AC,  0x00AD,  0x00AE,  0x00AF,
			  0x00B0,  0x00B1,  0x00B2,  0x00B3,  0x00B4,  0x00B5,  0x00B6,  0x00B7,
			  0x00B8,  0x00B9,  0x00BA,  0x00BB,  0x00BC,  0x00BD,  0x00BE,  0x00BF,
			  0x00C0,  0x00C1,  0x00C2,  0x00C3,  0x00C4,  0x00C5,  0x00C6,  0x00C7,
			  0x00C8,  0x00C9,  0x00CA,  0x00CB,  0x00CC,  0x00CD,  0x00CE,  0x00CF,
			  0x011E,  0x00D1,  0x00D2,  0x00D3,  0x00D4,  0x00D5,  0x00D6,  0x00D7,
			  0x00D8,  0x00D9,  0x00DA,  0x00DB,  0x00DC,  0x0130,  0x015E,  0x00DF,
			  0x00E0,  0x00E1,  0x00E2,  0x00E3,  0x00E4,  0x00E5,  0x00E6,  0x00E7,
			  0x00E8,  0x00E9,  0x00EA,  0x00EB,  0x00EC,  0x00ED,  0x00EE,  0x00EF,
			  0x011F,  0x00F1,  0x00F2,  0x00F3,  0x00F4,  0x00F5,  0x00F6,  0x00F7,
			  0x00F8,  0x00F9,  0x00FA,  0x00FB,  0x00FC,  0x0131,  0x015F,  0x00FF
			};
	private static final char data_1255[] = {  
			  0x20AC,  0x0081,  0x201A,  0x0192,  0x201E,  0x2026,  0x2020,  0x2021,
			  0x02C6,  0x2030,  0x008A,  0x2039,  0x008C,  0x008D,  0x008E,  0x008F,
			  0x0090,  0x2018,  0x2019,  0x201C,  0x201D,  0x2022,  0x2013,  0x2014,
			  0x02DC,  0x2122,  0x009A,  0x203A,  0x009C,  0x009D,  0x009E,  0x009F,
			  0x00A0,  0x00A1,  0x00A2,  0x00A3,  0x20AA,  0x00A5,  0x00A6,  0x00A7,
			  0x00A8,  0x00A9,  0x00D7,  0x00AB,  0x00AC,  0x00AD,  0x00AE,  0x00AF,
			  0x00B0,  0x00B1,  0x00B2,  0x00B3,  0x00B4,  0x00B5,  0x00B6,  0x00B7,
			  0x00B8,  0x00B9,  0x00F7,  0x00BB,  0x00BC,  0x00BD,  0x00BE,  0x00BF,
			  0x05B0,  0x05B1,  0x05B2,  0x05B3,  0x05B4,  0x05B5,  0x05B6,  0x05B7,
			  0x05B8,  0x05B9,  0x05BA,  0x05BB,  0x05BC,  0x05BD,  0x05BE,  0x05BF,
			  0x05C0,  0x05C1,  0x05C2,  0x05C3,  0x05F0,  0x05F1,  0x05F2,  0x05F3,
			  0x05F4,  0xF88D,  0xF88E,  0xF88F,  0xF890,  0xF891,  0xF892,  0xF893,
			  0x05D0,  0x05D1,  0x05D2,  0x05D3,  0x05D4,  0x05D5,  0x05D6,  0x05D7,
			  0x05D8,  0x05D9,  0x05DA,  0x05DB,  0x05DC,  0x05DD,  0x05DE,  0x05DF,
			  0x05E0,  0x05E1,  0x05E2,  0x05E3,  0x05E4,  0x05E5,  0x05E6,  0x05E7,
			  0x05E8,  0x05E9,  0x05EA,  0xF894,  0xF895,  0x200E,  0x200F,  0xF896
			};
	private static final char data_1256[] = {  
			  0x20AC,  0x067E,  0x201A,  0x0192,  0x201E,  0x2026,  0x2020,  0x2021,
			  0x02C6,  0x2030,  0x0679,  0x2039,  0x0152,  0x0686,  0x0698,  0x0688,
			  0x06AF,  0x2018,  0x2019,  0x201C,  0x201D,  0x2022,  0x2013,  0x2014,
			  0x06A9,  0x2122,  0x0691,  0x203A,  0x0153,  0x200C,  0x200D,  0x06BA,
			  0x00A0,  0x060C,  0x00A2,  0x00A3,  0x00A4,  0x00A5,  0x00A6,  0x00A7,
			  0x00A8,  0x00A9,  0x06BE,  0x00AB,  0x00AC,  0x00AD,  0x00AE,  0x00AF,
			  0x00B0,  0x00B1,  0x00B2,  0x00B3,  0x00B4,  0x00B5,  0x00B6,  0x00B7,
			  0x00B8,  0x00B9,  0x061B,  0x00BB,  0x00BC,  0x00BD,  0x00BE,  0x061F,
			  0x06C1,  0x0621,  0x0622,  0x0623,  0x0624,  0x0625,  0x0626,  0x0627,
			  0x0628,  0x0629,  0x062A,  0x062B,  0x062C,  0x062D,  0x062E,  0x062F,
			  0x0630,  0x0631,  0x0632,  0x0633,  0x0634,  0x0635,  0x0636,  0x00D7,
			  0x0637,  0x0638,  0x0639,  0x063A,  0x0640,  0x0641,  0x0642,  0x0643,
			  0x00E0,  0x0644,  0x00E2,  0x0645,  0x0646,  0x0647,  0x0648,  0x00E7,
			  0x00E8,  0x00E9,  0x00EA,  0x00EB,  0x0649,  0x064A,  0x00EE,  0x00EF,
			  0x064B,  0x064C,  0x064D,  0x064E,  0x00F4,  0x064F,  0x0650,  0x00F7,
			  0x0651,  0x00F9,  0x0652,  0x00FB,  0x00FC,  0x200E,  0x200F,  0x06D2
			};
	private static final char data_1257[] = {  
			  0x20AC,  0x0081,  0x201A,  0x0083,  0x201E,  0x2026,  0x2020,  0x2021,
			  0x0088,  0x2030,  0x008A,  0x2039,  0x008C,  0x00A8,  0x02C7,  0x00B8,
			  0x0090,  0x2018,  0x2019,  0x201C,  0x201D,  0x2022,  0x2013,  0x2014,
			  0x0098,  0x2122,  0x009A,  0x203A,  0x009C,  0x00AF,  0x02DB,  0x009F,
			  0x00A0,  0xF8FC,  0x00A2,  0x00A3,  0x00A4,  0xF8FD,  0x00A6,  0x00A7,
			  0x00D8,  0x00A9,  0x0156,  0x00AB,  0x00AC,  0x00AD,  0x00AE,  0x00C6,
			  0x00B0,  0x00B1,  0x00B2,  0x00B3,  0x00B4,  0x00B5,  0x00B6,  0x00B7,
			  0x00F8,  0x00B9,  0x0157,  0x00BB,  0x00BC,  0x00BD,  0x00BE,  0x00E6,
			  0x0104,  0x012E,  0x0100,  0x0106,  0x00C4,  0x00C5,  0x0118,  0x0112,
			  0x010C,  0x00C9,  0x0179,  0x0116,  0x0122,  0x0136,  0x012A,  0x013B,
			  0x0160,  0x0143,  0x0145,  0x00D3,  0x014C,  0x00D5,  0x00D6,  0x00D7,
			  0x0172,  0x0141,  0x015A,  0x016A,  0x00DC,  0x017B,  0x017D,  0x00DF,
			  0x0105,  0x012F,  0x0101,  0x0107,  0x00E4,  0x00E5,  0x0119,  0x0113,
			  0x010D,  0x00E9,  0x017A,  0x0117,  0x0123,  0x0137,  0x012B,  0x013C,
			  0x0161,  0x0144,  0x0146,  0x00F3,  0x014D,  0x00F5,  0x00F6,  0x00F7,
			  0x0173,  0x0142,  0x015B,  0x016B,  0x00FC,  0x017C,  0x017E,  0x02D9
			};
	private static final char data_1258[] = {  
			  0x20AC,  0x0081,  0x201A,  0x0192,  0x201E,  0x2026,  0x2020,  0x2021,
			  0x02C6,  0x2030,  0x008A,  0x2039,  0x0152,  0x008D,  0x008E,  0x008F,
			  0x0090,  0x2018,  0x2019,  0x201C,  0x201D,  0x2022,  0x2013,  0x2014,
			  0x02DC,  0x2122,  0x009A,  0x203A,  0x0153,  0x009D,  0x009E,  0x0178,
			  0x00A0,  0x00A1,  0x00A2,  0x00A3,  0x00A4,  0x00A5,  0x00A6,  0x00A7,
			  0x00A8,  0x00A9,  0x00AA,  0x00AB,  0x00AC,  0x00AD,  0x00AE,  0x00AF,
			  0x00B0,  0x00B1,  0x00B2,  0x00B3,  0x00B4,  0x00B5,  0x00B6,  0x00B7,
			  0x00B8,  0x00B9,  0x00BA,  0x00BB,  0x00BC,  0x00BD,  0x00BE,  0x00BF,
			  0x00C0,  0x00C1,  0x00C2,  0x0102,  0x00C4,  0x00C5,  0x00C6,  0x00C7,
			  0x00C8,  0x00C9,  0x00CA,  0x00CB,  0x0300,  0x00CD,  0x00CE,  0x00CF,
			  0x0110,  0x00D1,  0x0309,  0x00D3,  0x00D4,  0x01A0,  0x00D6,  0x00D7,
			  0x00D8,  0x00D9,  0x00DA,  0x00DB,  0x00DC,  0x01AF,  0x0303,  0x00DF,
			  0x00E0,  0x00E1,  0x00E2,  0x0103,  0x00E4,  0x00E5,  0x00E6,  0x00E7,
			  0x00E8,  0x00E9,  0x00EA,  0x00EB,  0x0301,  0x00ED,  0x00EE,  0x00EF,
			  0x0111,  0x00F1,  0x0323,  0x00F3,  0x00F4,  0x01A1,  0x00F6,  0x00F7,
			  0x00F8,  0x00F9,  0x00FA,  0x00FB,  0x00FC,  0x01B0,  0x20AB,  0x00FF
			};
	private static final char data_10000[] = {  
			  0x00C4,  0x00C5,  0x00C7,  0x00C9,  0x00D1,  0x00D6,  0x00DC,  0x00E1,
			  0x00E0,  0x00E2,  0x00E4,  0x00E3,  0x00E5,  0x00E7,  0x00E9,  0x00E8,
			  0x00EA,  0x00EB,  0x00ED,  0x00EC,  0x00EE,  0x00EF,  0x00F1,  0x00F3,
			  0x00F2,  0x00F4,  0x00F6,  0x00F5,  0x00FA,  0x00F9,  0x00FB,  0x00FC,
			  0x2020,  0x00B0,  0x00A2,  0x00A3,  0x00A7,  0x2022,  0x00B6,  0x00DF,
			  0x00AE,  0x00A9,  0x2122,  0x00B4,  0x00A8,  0x2260,  0x00C6,  0x00D8,
			  0x221E,  0x00B1,  0x2264,  0x2265,  0x00A5,  0x00B5,  0x2202,  0x2211,
			  0x220F,  0x03C0,  0x222B,  0x00AA,  0x00BA,  0x2126,  0x00E6,  0x00F8,
			  0x00BF,  0x00A1,  0x00AC,  0x221A,  0x0192,  0x2248,  0x2206,  0x00AB,
			  0x00BB,  0x2026,  0x00A0,  0x00C0,  0x00C3,  0x00D5,  0x0152,  0x0153,
			  0x2013,  0x2014,  0x201C,  0x201D,  0x2018,  0x2019,  0x00F7,  0x25CA,
			  0x00FF,  0x0178,  0x2044,  0x20AC,  0x2039,  0x203A,  0xFB01,  0xFB02,
			  0x2021,  0x00B7,  0x201A,  0x201E,  0x2030,  0x00C2,  0x00CA,  0x00C1,
			  0x00CB,  0x00C8,  0x00CD,  0x00CE,  0x00CF,  0x00CC,  0x00D3,  0x00D4,
			  0xF8FF,  0x00D2,  0x00DA,  0x00DB,  0x00D9,  0x0131,  0x02C6,  0x02DC,
			  0x00AF,  0x02D8,  0x02D9,  0x02DA,  0x00B8,  0x02DD,  0x02DB,  0x02C7
			};
	private static final char data_10007[] = {  
			  0x0410,  0x0411,  0x0412,  0x0413,  0x0414,  0x0415,  0x0416,  0x0417,
			  0x0418,  0x0419,  0x041A,  0x041B,  0x041C,  0x041D,  0x041E,  0x041F,
			  0x0420,  0x0421,  0x0422,  0x0423,  0x0424,  0x0425,  0x0426,  0x0427,
			  0x0428,  0x0429,  0x042A,  0x042B,  0x042C,  0x042D,  0x042E,  0x042F,
			  0x2020,  0x00B0,  0x00A2,  0x00A3,  0x00A7,  0x2022,  0x00B6,  0x0406,
			  0x00AE,  0x00A9,  0x2122,  0x0402,  0x0452,  0x2260,  0x0403,  0x0453,
			  0x221E,  0x00B1,  0x2264,  0x2265,  0x0456,  0x00B5,  0x2202,  0x0408,
			  0x0404,  0x0454,  0x0407,  0x0457,  0x0409,  0x0459,  0x040A,  0x045A,
			  0x0458,  0x0405,  0x00AC,  0x221A,  0x0192,  0x2248,  0x2206,  0x00AB,
			  0x00BB,  0x2026,  0x00A0,  0x040B,  0x045B,  0x040C,  0x045C,  0x0455,
			  0x2013,  0x2014,  0x201C,  0x201D,  0x2018,  0x2019,  0x00F7,  0x201E,
			  0x040E,  0x045E,  0x040F,  0x045F,  0x2116,  0x0401,  0x0451,  0x044F,
			  0x0430,  0x0431,  0x0432,  0x0433,  0x0434,  0x0435,  0x0436,  0x0437,
			  0x0438,  0x0439,  0x043A,  0x043B,  0x043C,  0x043D,  0x043E,  0x043F,
			  0x0440,  0x0441,  0x0442,  0x0443,  0x0444,  0x0445,  0x0446,  0x0447,
			  0x0448,  0x0449,  0x044A,  0x044B,  0x044C,  0x044D,  0x044E,  0x00A4
			};
	private static final char data_10017[] = {  
			  0x0410,  0x0411,  0x0412,  0x0413,  0x0414,  0x0415,  0x0416,  0x0417,
			  0x0418,  0x0419,  0x041A,  0x041B,  0x041C,  0x041D,  0x041E,  0x041F,
			  0x0420,  0x0421,  0x0422,  0x0423,  0x0424,  0x0425,  0x0426,  0x0427,
			  0x0428,  0x0429,  0x042A,  0x042B,  0x042C,  0x042D,  0x042E,  0x042F,
			  0x2020,  0x00B0,  0x0490,  0x00A3,  0x00A7,  0x2022,  0x00B6,  0x0406,
			  0x00AE,  0x00A9,  0x2122,  0x0402,  0x0452,  0x2260,  0x0403,  0x0453,
			  0x221E,  0x00B1,  0x2264,  0x2265,  0x0456,  0x00B5,  0x0491,  0x0408,
			  0x0404,  0x0454,  0x0407,  0x0457,  0x0409,  0x0459,  0x040A,  0x045A,
			  0x0458,  0x0405,  0x00AC,  0x221A,  0x0192,  0x2248,  0x2206,  0x00AB,
			  0x00BB,  0x2026,  0x00A0,  0x040B,  0x045B,  0x040C,  0x045C,  0x0455,
			  0x2013,  0x2014,  0x201C,  0x201D,  0x2018,  0x2019,  0x00F7,  0x201E,
			  0x040E,  0x045E,  0x040F,  0x045F,  0x2116,  0x0401,  0x0451,  0x044F,
			  0x0430,  0x0431,  0x0432,  0x0433,  0x0434,  0x0435,  0x0436,  0x0437,
			  0x0438,  0x0439,  0x043A,  0x043B,  0x043C,  0x043D,  0x043E,  0x043F,
			  0x0440,  0x0441,  0x0442,  0x0443,  0x0444,  0x0445,  0x0446,  0x0447,
			  0x0448,  0x0449,  0x044A,  0x044B,  0x044C,  0x044D,  0x044E,  0x00A4
			};
	private static final char data_10079[] = {  
			  0x00C4,  0x00C5,  0x00C7,  0x00C9,  0x00D1,  0x00D6,  0x00DC,  0x00E1,
			  0x00E0,  0x00E2,  0x00E4,  0x00E3,  0x00E5,  0x00E7,  0x00E9,  0x00E8,
			  0x00EA,  0x00EB,  0x00ED,  0x00EC,  0x00EE,  0x00EF,  0x00F1,  0x00F3,
			  0x00F2,  0x00F4,  0x00F6,  0x00F5,  0x00FA,  0x00F9,  0x00FB,  0x00FC,
			  0x00DD,  0x00B0,  0x00A2,  0x00A3,  0x00A7,  0x2022,  0x00B6,  0x00DF,
			  0x00AE,  0x00A9,  0x2122,  0x00B4,  0x00A8,  0x2260,  0x00C6,  0x00D8,
			  0x221E,  0x00B1,  0x2264,  0x2265,  0x00A5,  0x00B5,  0x2202,  0x2211,
			  0x220F,  0x03C0,  0x222B,  0x00AA,  0x00BA,  0x2126,  0x00E6,  0x00F8,
			  0x00BF,  0x00A1,  0x00AC,  0x221A,  0x0192,  0x2248,  0x2206,  0x00AB,
			  0x00BB,  0x2026,  0x00A0,  0x00C0,  0x00C3,  0x00D5,  0x0152,  0x0153,
			  0x2013,  0x2014,  0x201C,  0x201D,  0x2018,  0x2019,  0x00F7,  0x25CA,
			  0x00FF,  0x0178,  0x2044,  0x00A4,  0x00D0,  0x00F0,  0x00DE,  0x00FE,
			  0x00FD,  0x00B7,  0x201A,  0x201E,  0x2030,  0x00C2,  0x00CA,  0x00C1,
			  0x00CB,  0x00C8,  0x00CD,  0x00CE,  0x00CF,  0x00CC,  0x00D3,  0x00D4,
			  0xF8FF,  0x00D2,  0x00DA,  0x00DB,  0x00D9,  0x0131,  0x02C6,  0x02DC,
			  0x00AF,  0x02D8,  0x02D9,  0x02DA,  0x00B8,  0x02DD,  0x02DB,  0x02C7
			};
	private static final char data_20127[] = {  
			  0x0000,  0x0001,  0x0002,  0x0003,  0x0004,  0x0005,  0x0006,  0x0007,
			  0x0008,  0x0009,  0x000A,  0x000B,  0x000C,  0x000D,  0x000E,  0x000F,
			  0x0010,  0x0011,  0x0012,  0x0013,  0x0014,  0x0015,  0x0016,  0x0017,
			  0x0018,  0x0019,  0x001A,  0x001B,  0x001C,  0x001D,  0x001E,  0x001F,
			  0x0020,  0x0021,  0x0022,  0x0023,  0x0024,  0x0025,  0x0026,  0x0027,
			  0x0028,  0x0029,  0x002A,  0x002B,  0x002C,  0x002D,  0x002E,  0x002F,
			  0x0030,  0x0031,  0x0032,  0x0033,  0x0034,  0x0035,  0x0036,  0x0037,
			  0x0038,  0x0039,  0x003A,  0x003B,  0x003C,  0x003D,  0x003E,  0x003F,
			  0x0040,  0x0041,  0x0042,  0x0043,  0x0044,  0x0045,  0x0046,  0x0047,
			  0x0048,  0x0049,  0x004A,  0x004B,  0x004C,  0x004D,  0x004E,  0x004F,
			  0x0050,  0x0051,  0x0052,  0x0053,  0x0054,  0x0055,  0x0056,  0x0057,
			  0x0058,  0x0059,  0x005A,  0x005B,  0x005C,  0x005D,  0x005E,  0x005F,
			  0x0060,  0x0061,  0x0062,  0x0063,  0x0064,  0x0065,  0x0066,  0x0067,
			  0x0068,  0x0069,  0x006A,  0x006B,  0x006C,  0x006D,  0x006E,  0x006F,
			  0x0070,  0x0071,  0x0072,  0x0073,  0x0074,  0x0075,  0x0076,  0x0077,
			  0x0078,  0x0079,  0x007A,  0x007B,  0x007C,  0x007D,  0x007E,  0x007F
			};
	private static final char data_20866[] = {  
			  0x2500,  0x2502,  0x250C,  0x2510,  0x2514,  0x2518,  0x251C,  0x2524,
			  0x252C,  0x2534,  0x253C,  0x2580,  0x2584,  0x2588,  0x258C,  0x2590,
			  0x2591,  0x2592,  0x2593,  0x2320,  0x25A0,  0x2219,  0x221A,  0x2248,
			  0x2264,  0x2265,  0x00A0,  0x2321,  0x00B0,  0x00B2,  0x00B7,  0x00F7,
			  0x2550,  0x2551,  0x2552,  0x0451,  0x2553,  0x2554,  0x2555,  0x2556,
			  0x2557,  0x2558,  0x2559,  0x255A,  0x255B,  0x255C,  0x255D,  0x255E,
			  0x255F,  0x2560,  0x2561,  0x0401,  0x2562,  0x2563,  0x2564,  0x2565,
			  0x2566,  0x2567,  0x2568,  0x2569,  0x256A,  0x256B,  0x256C,  0x00A9,
			  0x044E,  0x0430,  0x0431,  0x0446,  0x0434,  0x0435,  0x0444,  0x0433,
			  0x0445,  0x0438,  0x0439,  0x043A,  0x043B,  0x043C,  0x043D,  0x043E,
			  0x043F,  0x044F,  0x0440,  0x0441,  0x0442,  0x0443,  0x0436,  0x0432,
			  0x044C,  0x044B,  0x0437,  0x0448,  0x044D,  0x0449,  0x0447,  0x044A,
			  0x042E,  0x0410,  0x0411,  0x0426,  0x0414,  0x0415,  0x0424,  0x0413,
			  0x0425,  0x0418,  0x0419,  0x041A,  0x041B,  0x041C,  0x041D,  0x041E,
			  0x041F,  0x042F,  0x0420,  0x0421,  0x0422,  0x0423,  0x0416,  0x0412,
			  0x042C,  0x042B,  0x0417,  0x0428,  0x042D,  0x0429,  0x0427,  0x042A
			};
	private static final char data_21866[] = {  
			  0x2500,  0x2502,  0x250C,  0x2510,  0x2514,  0x2518,  0x251C,  0x2524,
			  0x252C,  0x2534,  0x253C,  0x2580,  0x2584,  0x2588,  0x258C,  0x2590,
			  0x2591,  0x2592,  0x2593,  0x2320,  0x25A0,  0x2219,  0x221A,  0x2248,
			  0x2264,  0x2265,  0x00A0,  0x2321,  0x00B0,  0x00B2,  0x00B7,  0x00F7,
			  0x2550,  0x2551,  0x2552,  0x0451,  0x0454,  0x2554,  0x0456,  0x0457,
			  0x2557,  0x2558,  0x2559,  0x255A,  0x255B,  0x0491,  0x045E,  0x255E,
			  0x255F,  0x2560,  0x2561,  0x0401,  0x0404,  0x2563,  0x0406,  0x0407,
			  0x2566,  0x2567,  0x2568,  0x2569,  0x256A,  0x0490,  0x040E,  0x00A9,
			  0x044E,  0x0430,  0x0431,  0x0446,  0x0434,  0x0435,  0x0444,  0x0433,
			  0x0445,  0x0438,  0x0439,  0x043A,  0x043B,  0x043C,  0x043D,  0x043E,
			  0x043F,  0x044F,  0x0440,  0x0441,  0x0442,  0x0443,  0x0436,  0x0432,
			  0x044C,  0x044B,  0x0437,  0x0448,  0x044D,  0x0449,  0x0447,  0x044A,
			  0x042E,  0x0410,  0x0411,  0x0426,  0x0414,  0x0415,  0x0424,  0x0413,
			  0x0425,  0x0418,  0x0419,  0x041A,  0x041B,  0x041C,  0x041D,  0x041E,
			  0x041F,  0x042F,  0x0420,  0x0421,  0x0422,  0x0423,  0x0416,  0x0412,
			  0x042C,  0x042B,  0x0417,  0x0428,  0x042D,  0x0429,  0x0427,  0x042A
			};
	private static final char data_28591[] = {  
			  0x0080,  0x0081,  0x0082,  0x0083,  0x0084,  0x0085,  0x0086,  0x0087,
			  0x0088,  0x0089,  0x008A,  0x008B,  0x008C,  0x008D,  0x008E,  0x008F,
			  0x0090,  0x0091,  0x0092,  0x0093,  0x0094,  0x0095,  0x0096,  0x0097,
			  0x0098,  0x0099,  0x009A,  0x009B,  0x009C,  0x009D,  0x009E,  0x009F,
			  0x00A0,  0x00A1,  0x00A2,  0x00A3,  0x00A4,  0x00A5,  0x00A6,  0x00A7,
			  0x00A8,  0x00A9,  0x00AA,  0x00AB,  0x00AC,  0x00AD,  0x00AE,  0x00AF,
			  0x00B0,  0x00B1,  0x00B2,  0x00B3,  0x00B4,  0x00B5,  0x00B6,  0x00B7,
			  0x00B8,  0x00B9,  0x00BA,  0x00BB,  0x00BC,  0x00BD,  0x00BE,  0x00BF,
			  0x00C0,  0x00C1,  0x00C2,  0x00C3,  0x00C4,  0x00C5,  0x00C6,  0x00C7,
			  0x00C8,  0x00C9,  0x00CA,  0x00CB,  0x00CC,  0x00CD,  0x00CE,  0x00CF,
			  0x00D0,  0x00D1,  0x00D2,  0x00D3,  0x00D4,  0x00D5,  0x00D6,  0x00D7,
			  0x00D8,  0x00D9,  0x00DA,  0x00DB,  0x00DC,  0x00DD,  0x00DE,  0x00DF,
			  0x00E0,  0x00E1,  0x00E2,  0x00E3,  0x00E4,  0x00E5,  0x00E6,  0x00E7,
			  0x00E8,  0x00E9,  0x00EA,  0x00EB,  0x00EC,  0x00ED,  0x00EE,  0x00EF,
			  0x00F0,  0x00F1,  0x00F2,  0x00F3,  0x00F4,  0x00F5,  0x00F6,  0x00F7,
			  0x00F8,  0x00F9,  0x00FA,  0x00FB,  0x00FC,  0x00FD,  0x00FE,  0x00FF
			};
	private static final char data_28592[] = {  
			  0x0080,  0x0081,  0x0082,  0x0083,  0x0084,  0x0085,  0x0086,  0x0087,
			  0x0088,  0x0089,  0x008A,  0x008B,  0x008C,  0x008D,  0x008E,  0x008F,
			  0x0090,  0x0091,  0x0092,  0x0093,  0x0094,  0x0095,  0x0096,  0x0097,
			  0x0098,  0x0099,  0x009A,  0x009B,  0x009C,  0x009D,  0x009E,  0x009F,
			  0x00A0,  0x0104,  0x02D8,  0x0141,  0x00A4,  0x013D,  0x015A,  0x00A7,
			  0x00A8,  0x0160,  0x015E,  0x0164,  0x0179,  0x00AD,  0x017D,  0x017B,
			  0x00B0,  0x0105,  0x02DB,  0x0142,  0x00B4,  0x013E,  0x015B,  0x02C7,
			  0x00B8,  0x0161,  0x015F,  0x0165,  0x017A,  0x02DD,  0x017E,  0x017C,
			  0x0154,  0x00C1,  0x00C2,  0x0102,  0x00C4,  0x0139,  0x0106,  0x00C7,
			  0x010C,  0x00C9,  0x0118,  0x00CB,  0x011A,  0x00CD,  0x00CE,  0x010E,
			  0x0110,  0x0143,  0x0147,  0x00D3,  0x00D4,  0x0150,  0x00D6,  0x00D7,
			  0x0158,  0x016E,  0x00DA,  0x0170,  0x00DC,  0x00DD,  0x0162,  0x00DF,
			  0x0155,  0x00E1,  0x00E2,  0x0103,  0x00E4,  0x013A,  0x0107,  0x00E7,
			  0x010D,  0x00E9,  0x0119,  0x00EB,  0x011B,  0x00ED,  0x00EE,  0x010F,
			  0x0111,  0x0144,  0x0148,  0x00F3,  0x00F4,  0x0151,  0x00F6,  0x00F7,
			  0x0159,  0x016F,  0x00FA,  0x0171,  0x00FC,  0x00FD,  0x0163,  0x02D9
			};
	private static final char data_28595[] = {  
			  0x0080,  0x0081,  0x0082,  0x0083,  0x0084,  0x0085,  0x0086,  0x0087,
			  0x0088,  0x0089,  0x008A,  0x008B,  0x008C,  0x008D,  0x008E,  0x008F,
			  0x0090,  0x0091,  0x0092,  0x0093,  0x0094,  0x0095,  0x0096,  0x0097,
			  0x0098,  0x0099,  0x009A,  0x009B,  0x009C,  0x009D,  0x009E,  0x009F,
			  0x00A0,  0x0401,  0x0402,  0x0403,  0x0404,  0x0405,  0x0406,  0x0407,
			  0x0408,  0x0409,  0x040A,  0x040B,  0x040C,  0x00AD,  0x040E,  0x040F,
			  0x0410,  0x0411,  0x0412,  0x0413,  0x0414,  0x0415,  0x0416,  0x0417,
			  0x0418,  0x0419,  0x041A,  0x041B,  0x041C,  0x041D,  0x041E,  0x041F,
			  0x0420,  0x0421,  0x0422,  0x0423,  0x0424,  0x0425,  0x0426,  0x0427,
			  0x0428,  0x0429,  0x042A,  0x042B,  0x042C,  0x042D,  0x042E,  0x042F,
			  0x0430,  0x0431,  0x0432,  0x0433,  0x0434,  0x0435,  0x0436,  0x0437,
			  0x0438,  0x0439,  0x043A,  0x043B,  0x043C,  0x043D,  0x043E,  0x043F,
			  0x0440,  0x0441,  0x0442,  0x0443,  0x0444,  0x0445,  0x0446,  0x0447,
			  0x0448,  0x0449,  0x044A,  0x044B,  0x044C,  0x044D,  0x044E,  0x044F,
			  0x2116,  0x0451,  0x0452,  0x0453,  0x0454,  0x0455,  0x0456,  0x0457,
			  0x0458,  0x0459,  0x045A,  0x045B,  0x045C,  0x00A7,  0x045E,  0x045F
			};
	private static final char data_28605[] = {  
			  0x0080,  0x0081,  0x0082,  0x0083,  0x0084,  0x0085,  0x0086,  0x0087,
			  0x0088,  0x0089,  0x008A,  0x008B,  0x008C,  0x008D,  0x008E,  0x008F,
			  0x0090,  0x0091,  0x0092,  0x0093,  0x0094,  0x0095,  0x0096,  0x0097,
			  0x0098,  0x0099,  0x009A,  0x009B,  0x009C,  0x009D,  0x009E,  0x009F,
			  0x00A0,  0x00A1,  0x00A2,  0x00A3,  0x20AC,  0x00A5,  0x0160,  0x00A7,
			  0x0161,  0x00A9,  0x00AA,  0x00AB,  0x00AC,  0x00AD,  0x00AE,  0x00AF,
			  0x00B0,  0x00B1,  0x00B2,  0x00B3,  0x017D,  0x00B5,  0x00B6,  0x00B7,
			  0x017E,  0x00B9,  0x00BA,  0x00BB,  0x0152,  0x0153,  0x0178,  0x00BF,
			  0x00C0,  0x00C1,  0x00C2,  0x00C3,  0x00C4,  0x00C5,  0x00C6,  0x00C7,
			  0x00C8,  0x00C9,  0x00CA,  0x00CB,  0x00CC,  0x00CD,  0x00CE,  0x00CF,
			  0x00D0,  0x00D1,  0x00D2,  0x00D3,  0x00D4,  0x00D5,  0x00D6,  0x00D7,
			  0x00D8,  0x00D9,  0x00DA,  0x00DB,  0x00DC,  0x00DD,  0x00DE,  0x00DF,
			  0x00E0,  0x00E1,  0x00E2,  0x00E3,  0x00E4,  0x00E5,  0x00E6,  0x00E7,
			  0x00E8,  0x00E9,  0x00EA,  0x00EB,  0x00EC,  0x00ED,  0x00EE,  0x00EF,
			  0x00F0,  0x00F1,  0x00F2,  0x00F3,  0x00F4,  0x00F5,  0x00F6,  0x00F7,
			  0x00F8,  0x00F9,  0x00FA,  0x00FB,  0x00FC,  0x00FD,  0x00FE,  0x00FF
			};

}
