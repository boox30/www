package com.onyx.kreader.note.data;

import com.onyx.android.sdk.data.PageRange;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedHashMap;
import java.util.List;

/**
 * Created by zhuzeng on 9/16/16.
 * pageName A --- ["uuidA", "uuidB", "uuidC"],
 * pageName B --- ["uuidX"]
 * for pageName it's specified by the caller, usually it's document page number or file name (for image file)
 * for sub page unique id, it's always generated by note document.
 */

public class ReaderNotePageNameMap {

    private LinkedHashMap<String, List<String>> data = new LinkedHashMap<>();
    private Comparator<String> comparator = new Comparator<String>() {
        @Override
        public int compare(String lhs, String rhs) {
            try {
                int left = Integer.parseInt(lhs);
                int right = Integer.parseInt(rhs);
                return left - right;
            } catch (NumberFormatException e) {
                return lhs.compareTo(rhs);
            }
        }
    };

    public ReaderNotePageNameMap() {
    }

    public int getSubPageCount(final PageRange range) {
        List<String> pageList = getSortedNameList(range);
        int count = 0;
        for (String page : pageList) {
            count += data.get(page).size();
        }
        return count;
    }

    public String getSubPageUniqueId(final PageRange range, int subPageIndex) {
        if (subPageIndex < 0) {
            return null;
        }

        List<String> pageList = getSortedNameList(range);
        if (pageList.isEmpty()) {
            return null;
        }

        List<String> list = null;
        for (String p : pageList) {
            list = data.get(p);
            int idx = subPageIndex - list.size();
            if (idx <= 0) {
                break;
            }
            subPageIndex = idx;
        }

        if (subPageIndex >= list.size()) {
            return null;
        }

        return list.get(subPageIndex);
    }

    public void add(final PageRange range, final String subPageUniqueId) {
        List<String> pageList = getSortedNameList(range);
        if (pageList.isEmpty()) {
            data.put(range.startPosition, Arrays.asList(new String[] { subPageUniqueId }));
            return;
        }

        data.get(pageList.get(pageList.size() - 1)).add(subPageUniqueId);
    }

    public void add(final PageRange range, int subPageIndex, final String subPageUniqueId) {
        List<String> pageList = getSortedNameList(range);
        if (pageList.isEmpty()) {
            data.put(range.startPosition, new ArrayList<String>());
            for (int i = 0; i < subPageIndex; i++) {
                data.get(range.startPosition).add(i, null);
            }
            data.get(range.startPosition).add(subPageIndex, subPageUniqueId);
            return;
        }

        List<String> list = null;
        for (String p : pageList) {
            list = data.get(p);
            int idx = subPageIndex - list.size();
            if (idx <= 0) {
                break;
            }
            subPageIndex = idx;
        }

        for (int i = list.size(); i < subPageIndex; i++) {
            list.add(i, null);
        }
        list.add(subPageIndex, subPageUniqueId);
    }

    public void set(final PageRange range, int subPageIndex, final String subPageUniqueId) {
        List<String> pageList = getSortedNameList(range);
        if (pageList.isEmpty()) {
            data.put(range.startPosition, new ArrayList<String>());
            for (int i = 0; i < subPageIndex; i++) {
                data.get(range.startPosition).add(i, null);
            }
            data.get(range.startPosition).add(subPageIndex, subPageUniqueId);
            return;
        }

        List<String> list = null;
        for (String p : pageList) {
            list = data.get(p);
            int idx = subPageIndex - list.size();
            if (idx <= 0) {
                break;
            }
            subPageIndex = idx;
        }

        if (list.size() > subPageIndex) {
            list.set(subPageIndex, subPageUniqueId);
            return;
        }

        for (int i = list.size(); i < subPageIndex; i++) {
            list.add(i, null);
        }
        list.add(subPageIndex, subPageUniqueId);
    }

    public String removeSubPage(final PageRange range, final int subPageIndex) {
        List<String> pageList = getSortedNameList(range);
        if (pageList.isEmpty()) {
            return null;
        }

        int idx = subPageIndex;
        List<String> list = null;
        for (String p : pageList) {
            list = data.get(p);
            int i = subPageIndex - list.size();
            if (i < 0) {
                break;
            }
            idx = i;
        }

        if (idx >= list.size()) {
            return null;
        }

        return list.remove(idx);
    }

    public int size() {
        return data.size();
    }

    public void clear() {
        data.clear();
    }

    public LinkedHashMap<String, List<String>> getData() {
        return data;
    }

    public void setData(LinkedHashMap<String, List<String>> data) {
        this.data = data;
    }

    public void copyFrom(final ReaderNotePageNameMap map) {
        data.clear();
        data.putAll(map.getData());
    }

    public List<String> nameList() {
        return new ArrayList<>(data.keySet());
    }

    private List<String> getSortedNameList(final PageRange range) {
        ArrayList<String> list = new ArrayList<>();
        for (String name : data.keySet()) {
            if (comparator.compare(name, range.startPosition) >= 0 &&
                    comparator.compare(name, range.endPosition) <= 0) {
                list.add(name);
            }
        }
        Collections.sort(list, comparator);
        return list;
    }
}
