package com.onyx.kreader.note.model;

import android.graphics.Bitmap;
import android.graphics.Color;
import com.onyx.android.sdk.scribble.data.NoteBackgroundType;
import com.onyx.android.sdk.scribble.data.NoteModel;
import com.onyx.android.sdk.scribble.shape.ShapeFactory;
import com.onyx.kreader.note.data.ReaderNotePageNameMap;
import com.raizlabs.android.dbflow.annotation.*;
import com.raizlabs.android.dbflow.structure.BaseModel;

import java.util.Date;

/**
 * Created by zhuzeng on 9/16/16.
 */
@Table(database = ReaderNoteDatabase.class)
public class ReaderNoteDocumentModel extends BaseModel {

    public static final int TYPE_LIBRARY = 0;
    public static final int TYPE_DOCUMENT = 1;

    @Column
    @PrimaryKey(autoincrement = true)
    @Index
    long id;

    @Column
    Date createdAt = null;

    @Column
    Date updatedAt = null;

    @Column
    @Unique
    String uniqueId;

    @Column
    String parentUniqueId;

    @Column
    String subPageName;

    @Column
    String title;

    @Column
    String extraAttributes;

    @Column
    int type;

    @Column
    float strokeWidth;

    @Column
    int strokeColor;

    @Column
    int currentShapeType;

    @Column
    int background;

    @Column(typeConverter = ConverterPageMap.class)
    ReaderNotePageNameMap readerNotePageNameMap = null;

    Bitmap thumbnail;

    public ReaderNoteDocumentModel() {
    }

    public long getId() {
        return id;
    }

    public void setId(long value) {
        id = value;
    }

    public void setCreatedAt(final Date d) {
        createdAt = d;
    }

    public final Date getCreatedAt() {
        return createdAt;
    }

    public final Date getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(final Date d) {
        updatedAt = d;
    }

    public String getUniqueId() {
        return uniqueId;
    }

    /**
     * the unique id can be generated by itself when it's virtual note
     * also it can be md5 of associated file.
     * @param id
     */
    public void setUniqueId(final String id) {
        uniqueId = id;
    }

    public String getParentUniqueId() {
        return parentUniqueId;
    }

    public void setParentUniqueId(final String name) {
        parentUniqueId = name;
    }

    public String getSubPageName() {
        return subPageName;
    }

    public void setSubPageName(final String spn) {
        subPageName = spn;
    }

    public String getExtraAttributes() {
        return extraAttributes;
    }

    public void setExtraAttributes(final String attributes) {
        extraAttributes = attributes;
    }

    public void setTitle(final String t) {
        title = t;
    }

    public String getTitle() {
        return title;
    }

    public int getType() {
        return type;
    }

    public void setType(int t) {
        type = t;
    }

    public boolean isDocument() {
        return type == TYPE_DOCUMENT;
    }

    public boolean isLibrary() {
        return type == TYPE_LIBRARY;
    }

    public ReaderNotePageNameMap getReaderNotePageNameMap() {
        return readerNotePageNameMap;
    }

    public void setReaderNotePageNameMap(final ReaderNotePageNameMap names) {
        readerNotePageNameMap = names;
    }

    public Bitmap getThumbnail() {
        return thumbnail;
    }

    public void setThumbnail(final Bitmap bmp) {
        thumbnail = bmp;
    }

    public void setStrokeWidth(float w) {
        strokeWidth = w;
    }

    public float getStrokeWidth() {
        if (strokeWidth <= 0) {
            return getDefaultStrokeWidth();
        }
        return strokeWidth;
    }

    public int getBackground() {
        return background;
    }

    public void setBackground(int background) {
        this.background = background;
    }

    public int getStrokeColor() {
        return strokeColor;
    }

    public void setStrokeColor(int strokeColor) {
        this.strokeColor = strokeColor;
    }

    public int getCurrentShapeType() {
        return currentShapeType;
    }

    public void setCurrentShapeType(int currentShapeType) {
        this.currentShapeType = currentShapeType;
    }

    private void beforeSave() {
        if (createdAt == null) {
            createdAt = new Date();
        }
        updatedAt = new Date();
    }

    public boolean save() {
        beforeSave();
        return super.save();
    }

    public static float getDefaultStrokeWidth() {
        return NoteModel.getDefaultStrokeWidth();
    }

    public static int getDefaultStrokeColor() {
        return Color.BLACK;
    }

    public static int getDefaultBackground() {
        return NoteBackgroundType.EMPTY;
    }

    public static ReaderNoteDocumentModel createNote(final String documentUniqueId, final String parentUniqueId, final String title) {
        final ReaderNoteDocumentModel document = new ReaderNoteDocumentModel();
        document.setType(TYPE_DOCUMENT);
        document.setUniqueId(documentUniqueId);
        document.setParentUniqueId(parentUniqueId);
        document.setTitle(title);
        return document;
    }

    public static ReaderNoteDocumentModel createLibrary(final String libraryUniqueId, final String parentUniqueId, final String title) {
        final ReaderNoteDocumentModel library = new ReaderNoteDocumentModel();
        library.setType(TYPE_LIBRARY);
        library.setUniqueId(libraryUniqueId);
        library.setParentUniqueId(parentUniqueId);
        library.setTitle(title);
        return library;
    }

}
