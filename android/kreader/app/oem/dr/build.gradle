apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

apply from: file(rootProject.projectDir.absolutePath + '/signing.gradle')
apply from: file(rootProject.projectDir.absolutePath + '/versioning.gradle')
android {
    compileSdkVersion rootProject.ext.compatibleSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode gitVersionCode(projectDir)
        versionName gitVersionCode(projectDir).toString() + " - " + gitHash(projectDir)
        multiDexEnabled true
        testInstrumentationRunner "com.android.test.runner.MultiDexTestRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../../../proguard-rules.pro', 'proguard-rules.pro'
            signingConfig signingConfigs.release
            manifestPlaceholders = [channel_value  : releaseChannel(),
                                    type_value     : releaseType(),
                                    timestamp_value: System.currentTimeMillis() + "L"]
        }
        debug {
            debuggable true
            jniDebuggable true
            manifestPlaceholders = [channel_value  : releaseChannel(),
                                    type_value     : releaseType(),
                                    timestamp_value: System.currentTimeMillis() + "L"]
        }
    }

    dexOptions {
        preDexLibraries = false
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'org/mozilla/universalchardet/CharsetListener.class'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
}
apt {
    arguments {
        targetModuleName 'DR'
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    testCompile "junit:junit:$rootProject.junitVersion"
    androidTestCompile('com.android.support.test:runner:0.5') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile('com.android.support.test:rules:0.5') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile(name: 'onyxdownloadservice-release', ext: 'aar')
    compile "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    testCompile "junit:junit:$rootProject.junitVersion"
    apt "com.github.Raizlabs.DBFlow:dbflow-processor:$rootProject.dbflowVersion"
    compile "com.github.Raizlabs.DBFlow:dbflow-core:$rootProject.dbflowVersion"
    compile "com.github.Raizlabs.DBFlow:dbflow:$rootProject.dbflowVersion"
    compile(project(path: ':libraries:onyxsdk-data')) {
        ['com.github.Raizlabs.DBFlow', 'com.alibaba'].each {
            exclude group: it
        }
    }
    compile(project(':libraries:onyxsdk-ui')) {
        exclude group: 'com.alibaba', module: 'fastjson'
    }
    compile "com.android.support:multidex:$multidexVersion"
    compile "cn.leancloud.android:avoscloud-sdk:$rootProject.avoscloudVersion"
    compile("cn.leancloud.android:avoscloud-push:$rootProject.avoscloudVersion@aar") {
        transitive = true
    }
    compile "org.greenrobot:eventbus:$rootProject.eventbusVersion"
    compile "com.jakewharton:butterknife:$rootProject.butterknifeVersion"
    compile(project(path: ':libraries:onyxsdk-reader')) {
        exclude group: 'com.alibaba', module: 'fastjson'
    }
    compile(project(path: ':libraries:onyxsdk-scribble')) {
        exclude group: 'com.alibaba', module: 'fastjson'
    }
    compile(name: 'onyxsdk-dict-release', ext: 'aar') {
        exclude group: 'org.mozilla.juniversalchardet', module: 'juniversalchardet'
    }
    compile "org.jsoup:jsoup:$rootProject.jsoupVersion"
}
