/*
 *  ADOBE CONFIDENTIAL
 *
 *  Copyright 2006-2010, Adobe Systems Incorporated
 *
 *  All Rights Reserved.
 *
 *  NOTICE:  All information contained herein is, and remains the property of
 *  Adobe Systems Incorporated and its suppliers, if any.  The intellectual and
 *  technical concepts contained herein are proprietary to Adobe Systems
 *  Incorporated and its suppliers and may be covered by U.S. and Foreign
 *  Patents, patents in process, and are protected by trade secret or copyright
 *  law.  Dissemination of this information or reproduction of this material is
 *  strictly forbidden unless prior written permission is obtained from Adobe
 *  Systems Incorporated.
 */

//
//  This file is autogenerated, all changes will be lost
//

#ifndef _DP_BIND_IDD_H
#define _DP_BIND_IDD_H

namespace dp
{
	static const int IID_Unknown = 2;
	static const int IID_RefCounted = 3;
	static const int IID_Releasable = 4;
	static const int IID_Callback = 5;
	static const int IID_List = 6;
	static const int IID_StringList = 7;
	static const int IID_ErrorList = 8;
}

namespace dpcrypt
{
	static const int IID_CryptProvider = 9;
	static const int IID_Hash = 10;
	static const int IID_Key = 11;
	static const int IID_Cryptor = 12;
	static const int IID_StreamCryptor = 13;
	static const int IID_Certificate = 14;
	static const int IID_Identity = 15;
}

namespace dpdev
{
}

namespace dpio
{
	static const int IID_Stream = 16;
	static const int IID_StreamClient = 17;
	static const int IID_Partition = 18;
}

namespace dpdev
{
	static const int IID_DeviceProvider = 19;
	static const int IID_Device = 20;
	static const int IID_DeviceListener = 21;
}

namespace dpdrm
{
	static const int IID_DRMProvider = 22;
	static const int IID_DRMProcessorClient = 23;
	static const int IID_DRMProcessor = 24;
	static const int IID_Activation = 25;
	static const int IID_FulfillmentItem = 26;
	static const int IID_Rights = 27;
	static const int IID_License = 28;
	static const int IID_Permission = 29;
}

namespace dpdoc
{
	static const int IID_DocumentProvider = 30;
	static const int IID_MetadataItem = 31;
	static const int IID_Document = 32;
	static const int IID_Renderer = 33;
	static const int IID_TOCItem = 34;
	static const int IID_Location = 35;
	static const int IID_RangeInfo = 36;
	static const int IID_ContentIterator = 37;
	static const int IID_DocumentClient = 38;
	static const int IID_RendererClient = 39;
	static const int IID_Surface = 40;
	static const int IID_Event = 41;
	static const int IID_DisplayElement = 42;
	static const int IID_DisplayHandler = 43;
	static const int IID_MouseEvent = 44;
	static const int IID_TextEvent = 45;
	static const int IID_KeyboardEvent = 46;
}

namespace dplib
{
	static const int IID_ContentRecord = 47;
	static const int IID_ContentTag = 48;
	static const int IID_LibraryListener = 49;
	static const int IID_Library = 50;
}

namespace dpres
{
	static const int IID_ResourceProvider = 51;
}

namespace dpnet
{
	static const int IID_NetProvider = 52;
}

namespace dptimer
{
	static const int IID_TimerProvider = 53;
	static const int IID_Timer = 54;
	static const int IID_TimerClient = 55;
}

namespace dpbootstrap
{
	static const int IID_Bootstrap = 56;
}

#endif // _DP_BIND_IDD_H
