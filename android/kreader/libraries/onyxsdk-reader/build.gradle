import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'

def artifact = new Properties()
artifact.load(new FileInputStream("$projectDir/deploy.settings"))

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName artifact.version

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        sourceSets.main {
            aidl.srcDirs = ['src/main/java']
            jniLibs.srcDir 'src/main/libs' //set libs as .so's location instead of jniLibs
            jni.srcDirs = [] //disable automatic ndk-build call with auto-generated Android.mk
        }

        // call regular ndk-build(.cmd) script from app directory
        task ndkBuild(type: Exec) {
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'ndk-build.cmd', '-C', file('src/main').absolutePath, '-j10'
            } else {
                commandLine '/opt/adt-bundle-linux/ndk/ndk-build', '-C', file('src/main').absolutePath, '-j10'
            }
        }

        tasks.withType(JavaCompile) {
            compileTask -> compileTask.dependsOn ndkBuild
        }

        task ndkClean(type: Exec) {
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'ndk-build.cmd', '-C', file('src/main').absolutePath, 'clean'
            } else {
                commandLine '/opt/adt-bundle-linux/ndk/ndk-build', '-C', file('src/main').absolutePath, 'clean'
            }
        }

        clean.dependsOn 'ndkClean'
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../../proguard-rules.pro', 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':libraries:onyxsdk-base')
    compile project(':libraries:onyxsdk-data')
    compile (project(':libraries:alreader-engine')) {
        exclude group: 'org.mozilla.juniversalchardet', module: 'juniversalchardet'
    }
    compile (project(':libraries:chinese-analyzer')) {
        exclude group: 'org.apache.lucene', module: 'lucene-core'
    }

    compile "com.android.support:multidex:$multidexVersion"
    compile "com.jakewharton:disklrucache:$rootProject.disklrucacheVersion"
    compile "net.lingala.zip4j:zip4j:$rootProject.zip4jVersion"
    compile "com.facebook.fresco:fresco:$rootProject.frescoVersion"

    testCompile "junit:junit:$rootProject.junitVersion"
    androidTestCompile 'com.android.support.test:runner:0.5'
}

apply from: file(rootProject.projectDir.absolutePath + '/deploy.gradle')
