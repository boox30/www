package com.onyx.libedu;import android.content.Context;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.Handler;import android.util.TimeUtils;import com.onyx.android.sdk.common.request.BaseCallback;import com.onyx.android.sdk.common.request.RequestManager;import com.onyx.android.sdk.utils.DateTimeUtil;import com.onyx.android.sdk.utils.LocaleUtils;import com.raizlabs.android.dbflow.config.FlowConfig;import com.raizlabs.android.dbflow.config.FlowManager;import org.apache.commons.codec.digest.DigestUtils;import org.json.JSONArray;import org.json.JSONObject;import java.util.Arrays;import java.util.Date;import java.util.HashMap;import java.util.Map;/** * Created by ming on 2016/11/1. */public class EduCloudManager {    private EduConf eduConf;    private RequestManager requestManager;    private EduConf chinaCloudConf;    private EduConf globalCloudConf;    public EduCloudManager() {        requestManager = new RequestManager(Thread.NORM_PRIORITY);        initEduConf();    }    private void initEduConf() {        chinaCloudConf = new EduConf();        globalCloudConf = new EduConf();    }    private EduConf useEduConf() {        if (LocaleUtils.isChinese()) {            eduConf = chinaCloudConf;        } else {            eduConf = globalCloudConf;        }        return eduConf;    }    public void acquireWakeLock(final Context context, final String tag) {        requestManager.acquireWakeLock(context, tag);    }    public void releaseWakeLock() {        requestManager.releaseWakeLock();    }    private final Runnable generateRunnable(final BaseEduRequest request) {        Runnable runnable = new Runnable() {            @Override            public void run() {                try {                    request.beforeExecute(EduCloudManager.this);                    request.execute(EduCloudManager.this);                } catch (Throwable tr) {                    request.setException(tr);                } finally {                    request.afterExecute(EduCloudManager.this);                    requestManager.dumpWakelocks();                    requestManager.removeRequest(request);                }            }        };        return runnable;    }    public boolean submitRequest(final Context context, final BaseEduRequest request, final BaseCallback callback) {        final Runnable runnable = generateRunnable(request);        return requestManager.submitRequestToMultiThreadPool(context, request, runnable, callback);    }    public Handler getLooperHandler() {        return requestManager.getLooperHandler();    }    public static boolean isWifiConnected(final Context context) {        ConnectivityManager cm = (ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);        if (cm == null) {            return false;        }        NetworkInfo wifi = cm.getNetworkInfo(ConnectivityManager.TYPE_WIFI);        if (wifi == null) {            return false;        }        return wifi.isConnected();    }    public final EduConf getEduConf() {        return useEduConf();    }    static public void initDatabase(final Context context) {        try {            FlowConfig.Builder builder = new FlowConfig.Builder(context);            FlowManager.init(builder.build());        } catch (Exception e) {            if (com.onyx.android.sdk.dataprovider.BuildConfig.DEBUG) {                e.printStackTrace();            }        }    }    static public void terminateCloudDatabase() {        FlowManager.destroy();    }    public void sign(Map<String, Object> paramMap) {        // 开发者的Access Key和Access Secret        String accessKey = "2016100112345678";        String accessSecret = "PrN2HybJmXzjgOzjQEPwy9pMDZR55z01";        String apiUrl = "http://dev.zxxk.com/api/getSubjectList";        // 创建参数表//        Map<String, Object> paramMap = new HashMap<String, Object>();//        paramMap.put("accessKey", accessKey);//        paramMap.put("stage", 2);//        paramMap.put("timestamp", "2016-10-01 13:12:12");        // 对参数名进行字典排序        String[] keyArray = paramMap.keySet().toArray(new String[0]);        Arrays.sort(keyArray);        // 拼接有序的参数名-值串        StringBuilder needEncryptString = new StringBuilder();        for (String key : keyArray) {            needEncryptString.append(key).append("=").append(paramMap.get(key)).append("&");        }        //拼接上开发者Access Secret        needEncryptString.append("accessSecret").append("=").append(getEduConf().getAccessSecret());        //SHA1 计算        String encryptString = DigestUtils.shaHex(needEncryptString.toString());        paramMap.put("sign", encryptString);//        return encryptString;    }    public Map<String, Object> createParamMap() {        Map<String, Object> paramMap = new HashMap<>();        paramMap.put("accessKey", getEduConf().getAccessKey());        paramMap.put("timestamp", DateTimeUtil.formatDate(new Date(System.currentTimeMillis())));        return paramMap;    }}