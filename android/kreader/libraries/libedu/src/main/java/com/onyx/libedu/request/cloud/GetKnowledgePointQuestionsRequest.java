package com.onyx.libedu.request.cloud;import com.onyx.android.sdk.data.utils.JSONObjectParseUtils;import com.onyx.libedu.BaseEduRequest;import com.onyx.libedu.EduCloudManager;import com.onyx.libedu.EduServiceFactory;import com.onyx.libedu.model.ChooseQuestionVariable;import com.onyx.libedu.model.Question;import com.onyx.libedu.model.Result;import org.json.JSONObject;import java.util.List;import java.util.Map;import retrofit2.Call;import retrofit2.Response;/** * Created by ming on 2016/11/1. */public class GetKnowledgePointQuestionsRequest extends BaseEduRequest{    private int invalidValue = -1;    private ChooseQuestionVariable variable;    private long startPage = 0;    private long countPerPage = 10;    private long knowledgePointId1 = invalidValue;    private long knowledgePointId2 = invalidValue;    private long knowledgePointId3 = invalidValue;    private List<Question> questions;    public GetKnowledgePointQuestionsRequest(ChooseQuestionVariable variable) {        this.variable = variable;    }    @Override    public void execute(EduCloudManager parent) throws Exception {        Map<String, Object> paramMap = parent.createParamMap();        paramMap.put("subjectId", variable.getSubject().getId());        paramMap.put("questionTypeId", variable.getQuestionType().getId());        paramMap.put("difficult", variable.getDifficult().getId());        paramMap.put("startPage", startPage);        paramMap.put("countPerPage", countPerPage);        if (knowledgePointId1 != invalidValue) {            paramMap.put("knowledgePointId1", knowledgePointId1);        }        if (knowledgePointId2 != invalidValue) {            paramMap.put("knowledgePointId2", knowledgePointId2);        }        if (knowledgePointId3 != invalidValue) {            paramMap.put("knowledgePointId3", knowledgePointId3);        }        parent.sign(paramMap);        Call<Result<List<Question>>> call = EduServiceFactory.getEduService(parent.getEduConf().getApiBase()).getKnowledgePointQuestionList(paramMap);        Response<Result<List<Question>>> response = call.execute();        if (response.isSuccessful()) {            Result<List<Question>> result = response.body();            questions = result.getData();        } else {            String errorCode = JSONObjectParseUtils.httpStatus(response.code(), new JSONObject(response.errorBody().string()));            throw new Exception(errorCode);        }    }    public List<Question> getQuestions() {        return questions;    }    public void setStartPage(long startPage) {        this.startPage = startPage;    }    public void setCountPerPage(long countPerPage) {        this.countPerPage = countPerPage;    }    public void setKnowledgePointId1(long knowledgePointId1) {        this.knowledgePointId1 = knowledgePointId1;    }    public void setKnowledgePointId2(long knowledgePointId2) {        this.knowledgePointId2 = knowledgePointId2;    }    public void setKnowledgePointId3(long knowledgePointId3) {        this.knowledgePointId3 = knowledgePointId3;    }}