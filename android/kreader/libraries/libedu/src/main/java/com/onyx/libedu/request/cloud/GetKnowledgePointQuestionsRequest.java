package com.onyx.libedu.request.cloud;import com.onyx.android.sdk.data.utils.JSONObjectParseUtils;import com.onyx.libedu.BaseEduRequest;import com.onyx.libedu.EduCloudManager;import com.onyx.libedu.EduServiceFactory;import com.onyx.libedu.model.ChooseQuestionVariable;import com.onyx.libedu.model.Question;import com.onyx.libedu.model.QuestionAnalytical;import com.onyx.libedu.model.Result;import org.json.JSONObject;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import retrofit2.Call;import retrofit2.Response;/** * Created by ming on 2016/11/1. */public class GetKnowledgePointQuestionsRequest extends BaseEduRequest{    private int invalidValue = -1;    private ChooseQuestionVariable variable;    private long startPage = 0;    private long countPerPage = 10;    private long knowledgePointId1 = invalidValue;    private long knowledgePointId2 = invalidValue;    private long knowledgePointId3 = invalidValue;    private List<Question> questions;    public GetKnowledgePointQuestionsRequest(ChooseQuestionVariable variable) {        this.variable = variable;    }    @Override    public void execute(EduCloudManager parent) throws Exception {        Map<String, Object> paramMap = parent.createParamMap();        paramMap.put("subjectId", variable.getSubject().getId());        paramMap.put("questionTypeId", variable.getQuestionType().getId());        paramMap.put("difficult", variable.getDifficult().getId());        paramMap.put("startPage", startPage);        paramMap.put("countPerPage", countPerPage);        if (knowledgePointId1 != invalidValue) {            paramMap.put("knowledgePointId1", knowledgePointId1);        }        if (knowledgePointId2 != invalidValue) {            paramMap.put("knowledgePointId2", knowledgePointId2);        }        if (knowledgePointId3 != invalidValue) {            paramMap.put("knowledgePointId3", knowledgePointId3);        }        parent.sign(paramMap);//        Call<Result<List<Question>>> call = EduServiceFactory.getEduService(parent.getEduConf().getApiBase()).getKnowledgePointQuestionList(paramMap);//        Response<Result<List<Question>>> response = call.execute();//        if (response.isSuccessful()) {//            Result<List<Question>> result = response.body();////            questions = result.getData();//        } else {//            String errorCode = JSONObjectParseUtils.httpStatus(response.code(), new JSONObject(response.errorBody().string()));////            throw new Exception(errorCode);//        }        questions = createTestData();    }    private List<Question> createTestData() {        Question q1 = new Question();        q1.setId(1);        q1.setDifficult(0);        q1.setStem("在Java中，下面对于构造函数的描述正确的是");        HashMap<String, String> options1 = new HashMap<>();        options1.put("类必须显式定义构造函数", "");        options1.put("构造函数的返回类型是void", "");        options1.put("构造函数和类有相同的名称，并且不能带任何参数", "");        options1.put("一个类可以定义多个构造函数", "");        q1.setQuestionOptions(options1);        Question q2 = new Question();        q2.setId(2);        q2.setDifficult(0);        q2.setStem("下面对static的描述错误的是？");        HashMap<String, String> options2 = new HashMap<>();        options2.put("静态修饰的成员变量和成员方法随着类的加载而加载", "");        options2.put("静态修饰的成员方法可以访问非静态成员变量", "");        options2.put("静态修饰的成员可以被整个类对象所共享", "");        options2.put("静态修饰的成员变量和成员方法随着类的消失而消失", "");        q2.setQuestionOptions(options2);        Question q3 = new Question();        q3.setId(3);        q3.setDifficult(0);        q3.setStem("请回答Java的访问修饰符");        q3.setAnswerCount(3);        ArrayList<Question> list = new ArrayList<>();        list.add(q1);        list.add(q2);        list.add(q3);        return list;    }    public List<Question> getQuestions() {        return questions;    }    public void setStartPage(long startPage) {        this.startPage = startPage;    }    public void setCountPerPage(long countPerPage) {        this.countPerPage = countPerPage;    }    public void setKnowledgePointId1(long knowledgePointId1) {        this.knowledgePointId1 = knowledgePointId1;    }    public void setKnowledgePointId2(long knowledgePointId2) {        this.knowledgePointId2 = knowledgePointId2;    }    public void setKnowledgePointId3(long knowledgePointId3) {        this.knowledgePointId3 = knowledgePointId3;    }}