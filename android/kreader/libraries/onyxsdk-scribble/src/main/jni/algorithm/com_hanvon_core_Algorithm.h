/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_hanvon_core_Algorithm */

#ifndef _Included_com_hanvon_core_Algorithm
#define _Included_com_hanvon_core_Algorithm
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_hanvon_core_Algorithm
 * Method:    initializeEx
 * Signature: (II[I)Z
 */
JNIEXPORT jboolean JNICALL Java_com_hanvon_core_Algorithm_initializeEx
  (JNIEnv *, jclass, jint, jint, jobject);

/*
 * Class:     com_hanvon_core_Algorithm
 * Method:    setPen
 * Signature: (IIIII)V
 */
JNIEXPORT void JNICALL Java_com_hanvon_core_Algorithm_setPen
  (JNIEnv *, jclass, jint, jint, jint, jint, jint);

/*
 * Class:     com_hanvon_core_Algorithm
 * Method:    setPenColor
 * Signature: ([I)V
 */
JNIEXPORT void JNICALL Java_com_hanvon_core_Algorithm_setPenColor
  (JNIEnv *, jclass, jintArray);

/*
 * Class:     com_hanvon_core_Algorithm
 * Method:    drawLine
 * Signature: (IIF[I[I)V
 */
JNIEXPORT void JNICALL Java_com_hanvon_core_Algorithm_drawLine
  (JNIEnv *, jclass, jint, jint, jfloat, jintArray, jintArray);

/*
 * Class:     com_hanvon_core_Algorithm
 * Method:    drawLineEx
 * Signature: (IIF[I[F)V
 */
JNIEXPORT void JNICALL Java_com_hanvon_core_Algorithm_drawLineEx
  (JNIEnv *, jclass, jint, jint, jfloat, jintArray, jfloatArray);

/*
 * Class:     com_hanvon_core_Algorithm
 * Method:    setClipRegion
 * Signature: ([I)V
 */
JNIEXPORT void JNICALL Java_com_hanvon_core_Algorithm_setClipRegion
  (JNIEnv *, jclass, jintArray);

/*
 * Class:     com_hanvon_core_Algorithm
 * Method:    addClipRegion
 * Signature: ([I)V
 */
JNIEXPORT void JNICALL Java_com_hanvon_core_Algorithm_addClipRegion
  (JNIEnv *, jclass, jintArray);

/*
 * Class:     com_hanvon_core_Algorithm
 * Method:    reSet
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_hanvon_core_Algorithm_reSet
  (JNIEnv *, jclass);

/*
 * Class:     com_hanvon_core_Algorithm
 * Method:    clear
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_hanvon_core_Algorithm_clear
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_hanvon_core_Algorithm
 * Method:    clearBackground
 * Signature: ([I)V
 */
JNIEXPORT void JNICALL Java_com_hanvon_core_Algorithm_clearBackground
  (JNIEnv *, jclass, jintArray);

/*
 * Class:     com_hanvon_core_Algorithm
 * Method:    clearBackgroundByte
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_com_hanvon_core_Algorithm_clearBackgroundByte
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     com_hanvon_core_Algorithm
 * Method:    setBackground
 * Signature: ([I)V
 */
JNIEXPORT void JNICALL Java_com_hanvon_core_Algorithm_setBackground
  (JNIEnv *, jclass, jintArray);

/*
 * Class:     com_hanvon_core_Algorithm
 * Method:    reDrawLine
 * Signature: ([I[FI[I)V
 */
JNIEXPORT void JNICALL Java_com_hanvon_core_Algorithm_reDrawLine
  (JNIEnv *, jclass, jintArray, jfloatArray, jint, jintArray);

/*
 * Class:     com_hanvon_core_Algorithm
 * Method:    reDrawLineEx
 * Signature: ([FIZ)V
 */
JNIEXPORT void JNICALL Java_com_hanvon_core_Algorithm_reDrawLineEx
  (JNIEnv *, jclass, jfloatArray, jint, jboolean);

/*
 * Class:     com_hanvon_core_Algorithm
 * Method:    reDraw
 * Signature: ([I[FI)V
 */
JNIEXPORT void JNICALL Java_com_hanvon_core_Algorithm_reDraw
  (JNIEnv *, jclass, jintArray, jfloatArray, jint);

/*
 * Class:     com_hanvon_core_Algorithm
 * Method:    interpolate
 * Signature: ([I[F[I[FZ)V
 */
JNIEXPORT void JNICALL Java_com_hanvon_core_Algorithm_interpolate
  (JNIEnv *, jclass, jintArray, jfloatArray, jintArray, jfloatArray, jboolean);

/*
 * Class:     com_hanvon_core_Algorithm
 * Method:    setSimulatePressure
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_com_hanvon_core_Algorithm_setSimulatePressure
  (JNIEnv *, jclass, jboolean);

#ifdef __cplusplus
}
#endif
#endif
