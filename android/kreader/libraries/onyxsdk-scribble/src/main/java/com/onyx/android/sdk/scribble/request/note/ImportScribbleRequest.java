package com.onyx.android.sdk.scribble.request.note;import android.content.Context;import android.database.Cursor;import android.database.sqlite.SQLiteException;import android.net.Uri;import com.onyx.android.sdk.common.request.BaseCallback;import com.onyx.android.sdk.scribble.NoteViewHelper;import com.onyx.android.sdk.scribble.data.NoteDataProvider;import com.onyx.android.sdk.scribble.data.NoteModel;import com.onyx.android.sdk.scribble.data.PageNameList;import com.onyx.android.sdk.scribble.data.ShapeDataProvider;import com.onyx.android.sdk.scribble.data.ShapeModel;import com.onyx.android.sdk.scribble.data.TouchPoint;import com.onyx.android.sdk.scribble.data.TouchPointList;import com.onyx.android.sdk.scribble.request.BaseNoteRequest;import com.onyx.android.sdk.scribble.shape.NormalPencilShape;import com.onyx.android.sdk.scribble.shape.Shape;import com.onyx.android.sdk.scribble.utils.CursorUtil;import com.onyx.android.sdk.scribble.utils.SerializationUtils;import com.onyx.android.sdk.utils.DateTimeUtil;import com.onyx.android.sdk.utils.StringUtils;import java.util.ArrayList;import java.util.Date;import java.util.List;import static android.provider.BaseColumns._ID;/** * Created by ming on 2016/12/2. */public class ImportScribbleRequest extends BaseNoteRequest {    private final String url = "content://com.onyx.android.sdk.OnyxCmsProvider/library_scribble";    private Context context;    private int maxCount = 0;    private List<NoteModel> noteModels = new ArrayList<>();    private String MD5 = "MD5";    private String PAGE = "Page";    private String COLOR = "Color";    private String THICKNESS = "Thickness";    private String POINTS = "Points";    private String UPDATE_TIME = "UpdateTime";    private String APPLICATION = "Application";    private String POSITION = "Position";    private String POINTS_BLOB = "PointsBlob";    private String UNIQUE_ID = "uniqueId";    private int sColumnID = -1;    private int sColumnMD5 = -1;    private int sColumnPage = -1;    private int sColumnColor = -1;    private int sColumnThickness = -1;    private int sColumnPoints = -1;    private int sColumnUpdateTime = -1;    private int sColumnApplication = -1;    private int sColumnPosition = -1;    private int sColumnPointsBlob = -1;    private int sColumnUniqueId = -1;    private static boolean columnIndexesInitialized = false;    public ImportScribbleRequest(Context context) {        this.context = context;    }    public void execute(NoteViewHelper helper) throws Exception {        noteModels = NoteDataProvider.loadNoteList(context, null);        Cursor cursor = null;        try {            Uri uri = Uri.parse(url);            cursor = context.getContentResolver().query(                    uri, null, null, null,                    null);            if (cursor == null) {                return;            }            maxCount = cursor.getCount();            int index = 0;            while (cursor.moveToNext()) {                readColumnData(cursor, maxCount, index);                index++;            }        } catch (SQLiteException e) {            e.printStackTrace();        } finally {            if (cursor != null) {                cursor.close();            }        }    }    private void readColumnData(Cursor c, int count, int index) {        ShapeModel shapeModel = new ShapeModel();        String title = "";        if (!columnIndexesInitialized) {            sColumnID = c.getColumnIndex(_ID);            sColumnMD5 = c.getColumnIndex(MD5);            sColumnPage = c.getColumnIndex(PAGE);            sColumnColor = c.getColumnIndex(COLOR);            sColumnThickness = c.getColumnIndex(THICKNESS);            sColumnPoints = c.getColumnIndex(POINTS);            sColumnUpdateTime = c.getColumnIndex(UPDATE_TIME);            sColumnApplication = c.getColumnIndex(APPLICATION);            sColumnPosition = c.getColumnIndex(POSITION);            sColumnPointsBlob = c.getColumnIndex(POINTS_BLOB);            sColumnUniqueId = c.getColumnIndex(UNIQUE_ID);            columnIndexesInitialized = true;        }        long id = CursorUtil.getLong(c, sColumnID);        String md5 = CursorUtil.getString(c, sColumnMD5);        Integer page = CursorUtil.getInt(c, sColumnPage);        Integer color = CursorUtil.getInt(c, sColumnColor);        double thickness = c.getDouble(sColumnThickness);        String update_time = CursorUtil.getString(c, sColumnUpdateTime);        String application = CursorUtil.getString(c, sColumnApplication);        String position = CursorUtil.getString(c, sColumnPosition);        byte[] pts = CursorUtil.getBlob(c, sColumnPointsBlob);        String uniqueId = CursorUtil.getString(c, sColumnUniqueId);        if (StringUtils.isNullOrEmpty(uniqueId)) {            return;        }        shapeModel.setDocumentUniqueId(md5);        shapeModel.setPageUniqueId(uniqueId);        shapeModel.setThickness((float) thickness);        shapeModel.setAppId(application);        shapeModel.setColor(color);        if (!StringUtils.isNullOrEmpty(update_time)) {            Date date = new Date(Long.valueOf(update_time));            shapeModel.setUpdatedAt(date);            title = DateTimeUtil.formatDate(date);        }        final TouchPointList points = SerializationUtils.pointsFromByteArray(pts);        shapeModel.setPoints(points);        Shape shape = new NormalPencilShape();        shapeModel.setShapeUniqueId(shape.getShapeUniqueId());        shapeModel.setShapeType(shape.getType());        for (TouchPoint touchPoint : points.getPoints()) {            shapeModel.updateBoundingRect(touchPoint.x, touchPoint.y);        }        ShapeDataProvider.saveShape(context, shapeModel);        saveNote(context, md5, uniqueId, title);        BaseCallback.ProgressInfo progressInfo = new BaseCallback.ProgressInfo();        progressInfo.progress = index;        progressInfo.totalBytes = count;        getCallback().progress(this, progressInfo);    }    private void saveNote(Context context, String documentUniqueId, String pageUniqueId, String title) {        for (NoteModel noteModel : noteModels) {            if (noteModel.getUniqueId().equals(documentUniqueId)) {                PageNameList pageNameList = noteModel.getPageNameList();                if (pageNameList != null && !pageNameList.contains(pageUniqueId)) {                    pageNameList.add(pageUniqueId);                }                NoteDataProvider.saveNote(context, noteModel);                return;            }        }        NoteModel noteModel = NoteModel.createNote(documentUniqueId, null, title);        PageNameList pageNameList = new PageNameList();        pageNameList.add(pageUniqueId);        noteModel.setPageNameList(pageNameList);        NoteDataProvider.saveNote(context, noteModel);        noteModels.add(noteModel);    }    public int getMaxCount() {        return maxCount;    }}